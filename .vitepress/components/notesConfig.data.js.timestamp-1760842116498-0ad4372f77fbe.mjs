// .vitepress/components/notesConfig.data.js
import fs from "node:fs";

// .tnotes.json
var repoName = "TNotes.typescript";
var ignore_dirs = [
  ".vscode",
  "0000",
  "assets",
  "node_modules",
  "hidden",
  "demos",
  "assets"
];

// .vitepress/components/constants.js
var IGNORE_DIRS = ignore_dirs;
var NOTES_DIR_KEY = "NOTES_DIR_KEY__" + repoName;
var NOTES_VIEW_KEY = "NOTES_VIEW_KEY__" + repoName;
var EN_WORD_LIST_COMP_IS_AUTO_SHOW_CARD = "EN_WORD_LIST_COMP_IS_AUTO_SHOW_CARD__" + repoName;
var TOC = "TOC";
var TOC_MD = TOC + ".md";

// .vitepress/components/notesConfig.data.js
var notesConfig_data_default = {
  // 监听笔记目录下的 .tnotes.json 文件变化
  watch: ["../../notes/**/.tnotes.json"],
  load(watchedFiles) {
    const allNotesConfig = {};
    watchedFiles.forEach((filePath) => {
      try {
        const dirName = filePath.split("/").slice(-2, -1)[0];
        if (IGNORE_DIRS.includes(dirName)) {
          console.log(`Skipping ignored directory: ${dirName}`);
          return;
        }
        const fileContent = fs.readFileSync(filePath, "utf-8");
        const configData = JSON.parse(fileContent);
        const noteIdMatch = filePath.match(/notes\/(\d{4})\./);
        if (noteIdMatch) {
          const noteId = noteIdMatch[1];
          const redirect = filePath.replace(/\.tnotes\.json$/, "README");
          allNotesConfig[noteId] = {
            ...configData,
            redirect
          };
        }
      } catch (error) {
        console.error(`Failed to load config file: ${filePath}`, error);
      }
    });
    return allNotesConfig;
  }
};
export {
  notesConfig_data_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLnZpdGVwcmVzcy9jb21wb25lbnRzL25vdGVzQ29uZmlnLmRhdGEuanMiLCAiLnRub3Rlcy5qc29uIiwgIi52aXRlcHJlc3MvY29tcG9uZW50cy9jb25zdGFudHMuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFx0bm90ZXNqc1xcXFxUTm90ZXMudHlwZXNjcmlwdFxcXFwudml0ZXByZXNzXFxcXGNvbXBvbmVudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXHRub3Rlc2pzXFxcXFROb3Rlcy50eXBlc2NyaXB0XFxcXC52aXRlcHJlc3NcXFxcY29tcG9uZW50c1xcXFxub3Rlc0NvbmZpZy5kYXRhLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdC8udml0ZXByZXNzL2NvbXBvbmVudHMvbm90ZXNDb25maWcuZGF0YS5qc1wiOy8vIC52aXRlcHJlc3MvY29tcG9uZW50cy9ub3Rlc0NvbmZpZy5kYXRhLnRzXHJcbmltcG9ydCBmcyBmcm9tICdub2RlOmZzJ1xyXG5pbXBvcnQgeyBJR05PUkVfRElSUyB9IGZyb20gJy4vY29uc3RhbnRzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIC8vIFx1NzZEMVx1NTQyQ1x1N0IxNFx1OEJCMFx1NzZFRVx1NUY1NVx1NEUwQlx1NzY4NCAudG5vdGVzLmpzb24gXHU2NTg3XHU0RUY2XHU1M0Q4XHU1MzE2XHJcbiAgd2F0Y2g6IFsnLi4vLi4vbm90ZXMvKiovLnRub3Rlcy5qc29uJ10sXHJcbiAgbG9hZCh3YXRjaGVkRmlsZXMpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCd3YXRjaGVkRmlsZXMnLCB3YXRjaGVkRmlsZXMpXHJcblxyXG4gICAgLy8gXHU1MjFEXHU1OUNCXHU1MzE2XHU0RTAwXHU0RTJBXHU3QTdBXHU1QkY5XHU4QzYxXHVGRjBDXHU3NTI4XHU0RThFXHU1QjU4XHU1MEE4XHU2MjQwXHU2NzA5XHU3QjE0XHU4QkIwXHU3Njg0XHU5MTREXHU3RjZFXHU2NTcwXHU2MzZFXHJcbiAgICBjb25zdCBhbGxOb3Rlc0NvbmZpZyA9IHt9XHJcblxyXG4gICAgLy8gXHU5MDREXHU1Mzg2XHU2MjQwXHU2NzA5XHU3NkQxXHU1NDJDXHU1MjMwXHU3Njg0IC50bm90ZXMuanNvbiBcdTY1ODdcdTRFRjZcclxuICAgIHdhdGNoZWRGaWxlcy5mb3JFYWNoKChmaWxlUGF0aCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NzZFRVx1NUY1NVx1NjYyRlx1NTQyNlx1NTcyOFx1NUZGRFx1NzU2NVx1NTIxN1x1ODg2OFx1NEUyRFxyXG4gICAgICAgIGNvbnN0IGRpck5hbWUgPSBmaWxlUGF0aC5zcGxpdCgnLycpLnNsaWNlKC0yLCAtMSlbMF0gLy8gXHU2M0QwXHU1M0Q2XHU3NkVFXHU1RjU1XHU1NDBEXHU3OUYwXHJcbiAgICAgICAgaWYgKElHTk9SRV9ESVJTLmluY2x1ZGVzKGRpck5hbWUpKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgU2tpcHBpbmcgaWdub3JlZCBkaXJlY3Rvcnk6ICR7ZGlyTmFtZX1gKVxyXG4gICAgICAgICAgcmV0dXJuIC8vIFx1OERGM1x1OEZDN1x1NUZGRFx1NzU2NVx1NzY4NFx1NzZFRVx1NUY1NVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gXHU4QkZCXHU1M0Q2XHU2NTg3XHU0RUY2XHU1MTg1XHU1QkI5XHJcbiAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsICd1dGYtOCcpXHJcbiAgICAgICAgY29uc3QgY29uZmlnRGF0YSA9IEpTT04ucGFyc2UoZmlsZUNvbnRlbnQpXHJcblxyXG4gICAgICAgIC8vIFx1NjNEMFx1NTNENlx1N0IxNFx1OEJCMCBJRFx1RkYwOFx1NjU4N1x1NEVGNlx1OERFRlx1NUY4NFx1NEUyRFx1NTI0RCA0IFx1NEUyQVx1NjU3MFx1NUI1N1x1RkYwOVxyXG4gICAgICAgIGNvbnN0IG5vdGVJZE1hdGNoID0gZmlsZVBhdGgubWF0Y2goL25vdGVzXFwvKFxcZHs0fSlcXC4vKVxyXG4gICAgICAgIGlmIChub3RlSWRNYXRjaCkge1xyXG4gICAgICAgICAgY29uc3Qgbm90ZUlkID0gbm90ZUlkTWF0Y2hbMV0gLy8gXHU4M0I3XHU1M0Q2XHU3QjE0XHU4QkIwIElEXHJcbiAgICAgICAgICBjb25zdCByZWRpcmVjdCA9IGZpbGVQYXRoLnJlcGxhY2UoL1xcLnRub3Rlc1xcLmpzb24kLywgJ1JFQURNRScpXHJcbiAgICAgICAgICBhbGxOb3Rlc0NvbmZpZ1tub3RlSWRdID0ge1xyXG4gICAgICAgICAgICAuLi5jb25maWdEYXRhLFxyXG4gICAgICAgICAgICByZWRpcmVjdCxcclxuICAgICAgICAgIH0gLy8gXHU1QzA2XHU5MTREXHU3RjZFXHU2NTcwXHU2MzZFXHU1QjU4XHU1MTY1XHU1QkY5XHU4QzYxXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBsb2FkIGNvbmZpZyBmaWxlOiAke2ZpbGVQYXRofWAsIGVycm9yKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdBbGwgbm90ZXMgY29uZmlnIGxvYWRlZDonLCBhbGxOb3Rlc0NvbmZpZylcclxuXHJcbiAgICByZXR1cm4gYWxsTm90ZXNDb25maWdcclxuICB9LFxyXG59XHJcbiIsICJ7XG4gIFwiYXV0aG9yXCI6IFwidG5vdGVzanNcIixcbiAgXCJyZXBvTmFtZVwiOiBcIlROb3Rlcy50eXBlc2NyaXB0XCIsXG4gIFwia2V5d29yZHNcIjogW1xuICAgIFwiVE5vdGVzLnR5cGVzY3JpcHRcIlxuICBdLFxuICBcImlnbm9yZV9kaXJzXCI6IFtcbiAgICBcIi52c2NvZGVcIixcbiAgICBcIjAwMDBcIixcbiAgICBcImFzc2V0c1wiLFxuICAgIFwibm9kZV9tb2R1bGVzXCIsXG4gICAgXCJoaWRkZW5cIixcbiAgICBcImRlbW9zXCIsXG4gICAgXCJhc3NldHNcIlxuICBdLFxuICBcInJvb3RTaWRlYmFyRGlyXCI6IFwiLi4vVE5vdGVzL3NpZGViYXJzXCIsXG4gIFwicm9vdF9pdGVtXCI6IHtcbiAgICBcImljb25cIjoge1xuICAgICAgXCJzcmNcIjogXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvdG5vdGVzanMvaW1nc0BtYWluL2Fzc2V0cy9pY29uLS10eXBlc2NyaXB0LnN2Z1wiXG4gICAgfSxcbiAgICBcInRpdGxlXCI6IFwidHlwZXNjcmlwdFwiLFxuICAgIFwiY29tcGxldGVkX25vdGVzX2NvdW50XCI6IDE5LFxuICAgIFwiZGV0YWlsc1wiOiBcIlRTIFx1N0IxNFx1OEJCMFwiLFxuICAgIFwibGlua1wiOiBcImh0dHBzOi8vdG5vdGVzanMuZ2l0aHViLmlvL1ROb3Rlcy50eXBlc2NyaXB0L1wiLFxuICAgIFwiY3JlYXRlZF9hdFwiOiAxNzI3MDQ2Nzg3MDAwLFxuICAgIFwidXBkYXRlZF9hdFwiOiAxNzYwODQyMTExNDE2LFxuICAgIFwiZGF5c19zaW5jZV9iaXJ0aFwiOiA5MjE5XG4gIH0sXG4gIFwicG9ydFwiOiA5MjE5LFxuICBcIm1lbnVJdGVtc1wiOiBbXG4gICAge1xuICAgICAgXCJ0ZXh0XCI6IFwiXHVEODNDXHVERkUwIEhvbWVcIixcbiAgICAgIFwibGlua1wiOiBcIi9cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0ZXh0XCI6IFwiXHUyNjk5XHVGRTBGIFNldHRpbmdzXCIsXG4gICAgICBcImxpbmtcIjogXCIvU2V0dGluZ3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0ZXh0XCI6IFwiXHVEODNEXHVEQ0QyIFROb3Rlc1wiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly90bm90ZXNqcy5naXRodWIuaW8vVE5vdGVzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidGV4dFwiOiBcIlx1RDgzRFx1RENDMiBUTm90ZXMueXVxdWVcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3Lnl1cXVlLmNvbS90ZGFodXlvdS90bm90ZXMueXVxdWVcIlxuICAgIH1cbiAgXSxcbiAgXCJzb2NpYWxMaW5rc1wiOiBbXG4gICAge1xuICAgICAgXCJhcmlhTGFiZWxcIjogXCJUZGFodXlvdSBcdThCRURcdTk2QzBcdTRFM0JcdTk4NzVcdTk0RkVcdTYzQTVcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3Lnl1cXVlLmNvbS90ZGFodXlvdVwiLFxuICAgICAgXCJpY29uXCI6IHtcbiAgICAgICAgXCJzdmdcIjogXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgZD1cXFwiTTE3LjI4IDIuOTU1YzIuOTcuMjAzIDMuNzU2IDIuMzQyIDMuODQgMi41OTdsMS4yOTcuMDk2Yy4xMyAwIC4xNjkuMTguMDU0LjIzNmMtMS4zMjMuNzE2LTEuNzI3IDIuMTctMS40OSAzLjExOGMuMDkuMzU4LjI1NC42OS40MTIgMS4wMmMuMzA3LjY0Mi42NTEgMS40MTguNzA3IDIuOTgxYy4xMTcgMy4yNC0yLjUxIDYuMTc1LTUuNzg5IDYuNTkzYzEuMTctMS4xODcgMS44MTUtMi40NDQgMi4xMi0zLjM3NWMuNjA2LTEuODQ2LjUwOC0zLjMxNi4wNTUtNC40NGE0LjQ2IDQuNDYgMCAwIDAtMS43ODItMi4xNDFjLTEuNjgzLTEuMDItMy4yMi0xLjA5LTQuNDQ0LS43NjJjLjQ2NS0uNTk0Ljg3Ni0xLjIwMSAxLjItMS44NjRjLjU4NC0xLjY1LS4xMDItMi44NDgtLjcwNC0zLjUxOWMtLjE5Mi0uMjQ2LS4wNjEtLjY1NS4zMDUtLjY1NWMxLjQxIDAgMi44MTMuMDIgNC4yMi4xMTVNMy4zMiAxOS4xMDdjMS45MjQtMi4yMDIgNC43MTItNS4zOTQgNy4xNjItOC4xNWMuNTU5LS42MyAyLjc2OS0yLjMzOCA1Ljc0OC0uNTMzYy44NzguNTMyIDIuNDMgMi4xNjUgMS4zMzIgNS41MWMtLjgwMyAyLjQ0Ni00LjQwOCA3Ljc5Ni0xNS43NiA1Ljg0NGMtLjIyNy0uMDM5LS41MTEtLjM1NC0uMjE4LS42ODd6XFxcIi8+PC9zdmc+XCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiYXJpYUxhYmVsXCI6IFwiVGRhaHV5b3UgQiBcdTdBRDlcdTRFM0JcdTk4NzVcdTk0RkVcdTYzQTVcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vc3BhY2UuYmlsaWJpbGkuY29tLzQwNzI0MTAwNFwiLFxuICAgICAgXCJpY29uXCI6IHtcbiAgICAgICAgXCJzdmdcIjogXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjEwMjRcXFwiIGhlaWdodD1cXFwiMTAyNFxcXCIgdmlld0JveD1cXFwiMCAwIDEwMjQgMTAyNFxcXCI+PGcgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIj48cGF0aCBkPVxcXCJNMzEwLjEzNCA1OTYuNDVjLTcuOTk5LTQuNDYzLTE2LjQ5OC04LjQzLTI0Ljk5Ny0xMS45YTI3NCAyNzQgMCAwIDAtMjYuOTk2LTcuNDM4Yy0yLjUtLjk5Mi0yLjUuOTkxLTIuNSAxLjQ4N2MwIDcuOTM0LjUgMTguODQzIDEuNSAyNy43NjhjMSA3LjQzOCAyIDE1LjM3MiA0IDIyLjgxYzAgLjQ5NiAwIC45OTEuNSAxLjQ4N2MuOTk5Ljk5MiAxLjk5OSAxLjQ4OCAyLjk5OS40OTZjNy45OTktNC40NjMgMTUuOTk4LTguNDMgMjIuOTk3LTEzLjM4OGM3LjQ5OS01LjQ1NCAxNS40OTgtMTEuOSAyMS45OTctMTguMzQ3YzEuNS0xLjQ4NyAwLTIuNDc5LjUtMi45NzVtMzIzLjk2LTExLjlhMjc0IDI3NCAwIDAgMC0yNi45OTctNy40MzhjLTIuNS0uOTkyLTIuNS45OTEtMi41IDEuNDg3YzAgNy45MzQuNSAxOC44NDMgMS41IDI3Ljc2OGMxIDcuNDM4IDIgMTUuMzcyIDQgMjIuODFjMCAuNDk2IDAgLjk5MS41IDEuNDg3YzEgLjk5MiAyIDEuNDg4IDMgLjQ5NmM3Ljk5OS00LjQ2MyAxNS45OTgtOC40MyAyMi45OTctMTMuMzg4YzcuNDk5LTUuNDU0IDE1LjQ5OC0xMS45IDIxLjk5Ny0xOC4zNDdjMi0xLjQ4Ny41LTIuNDc5LjUtMi45NzVjLTcuNS00LjQ2My0xNi40OTgtOC40My0yNC45OTctMTEuOVxcXCIvPjxwYXRoIGQ9XFxcIk03NDEuNDk2IDExMkgyODNjLTk0LjUwMSAwLTE3MSA3Ni41LTE3MSAxNzEuNXY0NThjLjUgOTQgNzcgMTcwLjUgMTcwLjk5OSAxNzAuNWg0NTcuOTk3Yzk0LjUgMCAxNzEuMDAyLTc2LjUgMTcxLjAwMi0xNzAuNXYtNDU4Yy40OTctOTUtNzYuMDAyLTE3MS41LTE3MC41MDItMTcxLjVtOTUgMzQzLjVoMTUuNXY0OGgtMTUuNXptLTk1LjUtMS41bDIgNDNsLTEzLjUgMS41bC01LTQ0LjV6bS0yMy41IDBsNCA0NS41bC0xNC41IDEuNWwtNi41LTQ3LjVoMTd6bS0yMzAuNDk4IDEuNWgxNXY0OGgtMTV6bS05Ni0xLjVsMiA0M2wtMTMuNSAxLjVsLTUtNDQuNXptLTIzLjUgMGw0IDQ1LjVsLTE0LjUgMmwtNi00Ny41em0tMy41IDE0OUMzNDMuNDk4IDY2OC41IDIxNiA2NjIuNSAyMDQuNSA2NjAuNUMxOTUuNSA0OTkgMTgxLjUgNDY0IDE3MCAzODVsNTQuNS0yMi41YzEgNzEuNSA5IDE4NSA5IDE4NXMxMDguNS0xNS41IDEzMiA0N2MuNSAzIDAgNi0xLjUgOC41bTIwLjUgMzUuNWwtMjMuNS0xMjRoMzUuNWwxMyAxMjN6bTQ0LjUtOGwtMjctMjM1bDMzLjUtMS41bDIxIDIzNkg0Mjl6bTM0LTE3NWgxNy41djQ4SDQ2N3ptNDEgMTkwaC0yNi41bC05LjUtMTI2aDM2em0yMDkuOTk4LTQzQzY5My40OTYgNjY4IDU2NS45OTcgNjYyIDU1NC40OTcgNjYwYy05LTE2MS0yMy0xOTYtMzQuNS0yNzVsNTQuNS0yMi41YzEgNzEuNSA5IDE4NSA5IDE4NXMxMDguNS0xNS41IDEzMiA0Ni41Yy41IDMgMCA2LTEuNSA4LjVtMTkuNSAzNmwtMjMtMTI0aDM1LjVsMTMgMTIzem00NS41LThsLTI3LjUtMjM1bDMzLjUtMS41bDIxIDIzNmgtMjd6bTMzLjUtMTc1aDE3LjV2NDhoLTEzem00MSAxOTBoLTI2LjVsLTkuNS0xMjZoMzZ6XFxcIi8+PC9nPjwvc3ZnPlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcImFyaWFMYWJlbFwiOiBcIlROb3Rlcy50eXBlc2NyaXB0IGdpdGh1YiBcdTRFRDNcdTVFOTNcdTk0RkVcdTYzQTVcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdFwiLFxuICAgICAgXCJpY29uXCI6IFwiZ2l0aHViXCJcbiAgICB9XG4gIF0sXG4gIFwiaWRcIjogXCJcIlxufSIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFxjb21wb25lbnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFx0bm90ZXNqc1xcXFxUTm90ZXMudHlwZXNjcmlwdFxcXFwudml0ZXByZXNzXFxcXGNvbXBvbmVudHNcXFxcY29uc3RhbnRzLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdC8udml0ZXByZXNzL2NvbXBvbmVudHMvY29uc3RhbnRzLmpzXCI7aW1wb3J0IHsgYXV0aG9yLCBpZ25vcmVfZGlycywgcmVwb05hbWUsIHJvb3RfaXRlbSB9IGZyb20gJy4uLy4uLy50bm90ZXMuanNvbidcclxuXHJcbi8qKlxyXG4gKiBcdTdCMTRcdThCQjBcdTRFRDNcdTVFOTNcdTU0MERcdTUxM0ZcclxuICovXHJcbmV4cG9ydCBjb25zdCBSRVBPX05BTUUgPSByZXBvTmFtZVxyXG5cclxuLyoqXHJcbiAqIFx1N0IxNFx1OEJCMFx1NEVEM1x1NUU5M1x1NEY1Q1x1ODAwNVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEFVVEhPUiA9IGF1dGhvclxyXG5cclxuLyoqXHJcbiAqIG5vdGVzIFx1NzZFRVx1NUY1NVx1NEUwQlx1OTcwMFx1ODk4MVx1NUZGRFx1NzU2NVx1NzY4NFx1N0IxNFx1OEJCMFx1NzZFRVx1NUY1NVxyXG4gKiBAZXhhbXBsZVxyXG4gKiBbXCIudnNjb2RlXCIsIFwiMDAwMFwiLCBcImFzc2V0c1wiLCBcIm5vZGVfbW9kdWxlc1wiXVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IElHTk9SRV9ESVJTID0gaWdub3JlX2RpcnNcclxuXHJcbi8qKlxyXG4gKiBcdTY4MzlcdTc3RTVcdThCQzZcdTVFOTNcdTkxNERcdTdGNkVcdTk4NzlcclxuICovXHJcbmV4cG9ydCBjb25zdCBST09UX0lURU0gPSByb290X2l0ZW1cclxuXHJcbi8qKlxyXG4gKiBcdTVCNThcdTUwQThcdTY3MkNcdTU3MzBcdTdCMTRcdThCQjBcdTY1ODdcdTRFRjZcdTU5MzlcdTYyNDBcdTU3MjhcdTRGNERcdTdGNkVcdTc2ODQga2V5XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTk9URVNfRElSX0tFWSA9ICdOT1RFU19ESVJfS0VZX18nICsgcmVwb05hbWVcclxuXHJcbi8qKlxyXG4gKiBcdTc1MjhcdTYyMzdcdTkwMDlcdTYyRTlcdTc2ODRcdTg5QzZcdTU2RkVcclxuICovXHJcbmV4cG9ydCBjb25zdCBOT1RFU19WSUVXX0tFWSA9ICdOT1RFU19WSUVXX0tFWV9fJyArIHJlcG9OYW1lXHJcblxyXG4vKipcclxuICogXHU1MTY4XHU1QzQwXHU5MTREXHU3RjZFIEVuV29yZExpc3QudnVlIFx1N0VDNFx1NEVGNlx1NjYyRlx1NTQyNlx1ODFFQVx1NTJBOFx1NUM1NVx1NzkzQVx1OEJDRFx1NkM0N1x1NTM2MVx1NzI0N1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVOX1dPUkRfTElTVF9DT01QX0lTX0FVVE9fU0hPV19DQVJEID1cclxuICAnRU5fV09SRF9MSVNUX0NPTVBfSVNfQVVUT19TSE9XX0NBUkRfXycgKyByZXBvTmFtZVxyXG5cclxuLyoqXHJcbiAqIFZpdGVQcmVzcyBIT01FIFJFQURNRSBcdTY1ODdcdTRFRjZcdTU0MERcclxuICogXHU4QkU1XHU2NTg3XHU0RUY2XHU1MTg1XHU1QkI5XHU1N0ZBXHU0RThFIEhPTUUgUkVBRE1FIFx1ODAwQ1x1NzUxRlx1NjIxMFx1RkYwQ1x1NEY1Q1x1NEUzQSBnaXRodWIgcGFnZXMgXHU0RTJEXHU3Njg0IFJFQURNRSBcdTY1ODdcdTRFRjZcdUZGMENcdTRFM0JcdTg5ODFcdTc1MjhcdTRFOEVcdTVDNTVcdTc5M0FcdTdCMTRcdThCQjBcdTc2ODRcdTc2RUVcdTVGNTVcdTdFRDNcdTY3ODRcdTMwMDJcclxuICovXHJcbmV4cG9ydCBjb25zdCBUT0MgPSAnVE9DJ1xyXG5leHBvcnQgY29uc3QgVE9DX01EID0gVE9DICsgJy5tZCdcclxuXHJcbi8qKlxyXG4gKiBcdTgyRjFcdThCRURcdTUzNTVcdThCQ0RcdTRFRDNcdTVFOTNcdTU3RkFcdTU3MzBcdTU3NDBcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3Rub3Rlc2pzL2VuLXdvcmRzL2Jsb2IvbWFpbi97d29yZH0ubWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBFTl9XT1JEU19SRVBPX0JBU0VfVVJMID1cclxuICAnaHR0cHM6Ly9naXRodWIuY29tL3Rub3Rlc2pzL1ROb3Rlcy5lbi13b3Jkcy9ibG9iL21haW4vJ1xyXG5cclxuLyoqXHJcbiAqIFx1ODJGMVx1OEJFRFx1NTM1NVx1OEJDRFx1NEVEM1x1NUU5MyByYXcgXHU1NzMwXHU1NzQwXHJcbiAqIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS90bm90ZXNqcy9UTm90ZXMuZW4td29yZHMvcmVmcy9oZWFkcy9tYWluL3t3b3JkfS5tZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVOX1dPUkRTX1JFUE9fQkFTRV9SQVdfVVJMID1cclxuICAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3Rub3Rlc2pzL1ROb3Rlcy5lbi13b3Jkcy9yZWZzL2hlYWRzL21haW4vJ1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQ0EsT0FBTyxRQUFROzs7QUNDYixlQUFZO0FBSVosa0JBQWU7QUFBQSxFQUNiO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7OztBQ0dLLElBQU0sY0FBYztBQVVwQixJQUFNLGdCQUFnQixvQkFBb0I7QUFLMUMsSUFBTSxpQkFBaUIscUJBQXFCO0FBSzVDLElBQU0sc0NBQ1gsMENBQTBDO0FBTXJDLElBQU0sTUFBTTtBQUNaLElBQU0sU0FBUyxNQUFNOzs7QUZ6QzVCLElBQU8sMkJBQVE7QUFBQTtBQUFBLEVBRWIsT0FBTyxDQUFDLDZCQUE2QjtBQUFBLEVBQ3JDLEtBQUssY0FBYztBQUlqQixVQUFNLGlCQUFpQixDQUFDO0FBR3hCLGlCQUFhLFFBQVEsQ0FBQyxhQUFhO0FBQ2pDLFVBQUk7QUFFRixjQUFNLFVBQVUsU0FBUyxNQUFNLEdBQUcsRUFBRSxNQUFNLElBQUksRUFBRSxFQUFFLENBQUM7QUFDbkQsWUFBSSxZQUFZLFNBQVMsT0FBTyxHQUFHO0FBQ2pDLGtCQUFRLElBQUksK0JBQStCLE9BQU8sRUFBRTtBQUNwRDtBQUFBLFFBQ0Y7QUFHQSxjQUFNLGNBQWMsR0FBRyxhQUFhLFVBQVUsT0FBTztBQUNyRCxjQUFNLGFBQWEsS0FBSyxNQUFNLFdBQVc7QUFHekMsY0FBTSxjQUFjLFNBQVMsTUFBTSxrQkFBa0I7QUFDckQsWUFBSSxhQUFhO0FBQ2YsZ0JBQU0sU0FBUyxZQUFZLENBQUM7QUFDNUIsZ0JBQU0sV0FBVyxTQUFTLFFBQVEsbUJBQW1CLFFBQVE7QUFDN0QseUJBQWUsTUFBTSxJQUFJO0FBQUEsWUFDdkIsR0FBRztBQUFBLFlBQ0g7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0YsU0FBUyxPQUFPO0FBQ2QsZ0JBQVEsTUFBTSwrQkFBK0IsUUFBUSxJQUFJLEtBQUs7QUFBQSxNQUNoRTtBQUFBLElBQ0YsQ0FBQztBQUlELFdBQU87QUFBQSxFQUNUO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==
