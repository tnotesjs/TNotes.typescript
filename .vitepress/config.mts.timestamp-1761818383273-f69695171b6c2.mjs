// .vitepress/config.mts
import markdownItContainer from "file:///C:/tnotesjs/TNotes.typescript/node_modules/.pnpm/markdown-it-container@4.0.0/node_modules/markdown-it-container/index.mjs";
import mila from "file:///C:/tnotesjs/TNotes.typescript/node_modules/.pnpm/markdown-it-link-attributes@4.0.1/node_modules/markdown-it-link-attributes/index.js";
import markdownItTaskLists from "file:///C:/tnotesjs/TNotes.typescript/node_modules/.pnpm/markdown-it-task-lists@2.1.1/node_modules/markdown-it-task-lists/index.js";
import {
  defineConfig
} from "file:///C:/tnotesjs/TNotes.typescript/node_modules/.pnpm/vitepress@1.6.4_@algolia+cl_c52e93a0764b5d90916653e105896dd8/node_modules/vitepress/dist/node/index.js";

// .tnotes.json
var author = "tnotesjs";
var repoName = "TNotes.typescript";
var keywords = [
  "TNotes.typescript"
];
var ignore_dirs = [
  ".vscode",
  "0000",
  "assets",
  "node_modules",
  "hidden",
  "demos",
  "assets"
];
var menuItems = [
  {
    text: "\u{1F3E0} Home",
    link: "/"
  },
  {
    text: "\u2699\uFE0F Settings",
    link: "/Settings"
  },
  {
    text: "\u{1F4D2} TNotes",
    link: "https://tnotesjs.github.io/TNotes"
  },
  {
    text: "\u{1F4C2} TNotes.yuque",
    link: "https://www.yuque.com/tdahuyou/tnotes.yuque"
  }
];
var socialLinks = [
  {
    ariaLabel: "Tdahuyou \u8BED\u96C0\u4E3B\u9875\u94FE\u63A5",
    link: "https://www.yuque.com/tdahuyou",
    icon: {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M17.28 2.955c2.97.203 3.756 2.342 3.84 2.597l1.297.096c.13 0 .169.18.054.236c-1.323.716-1.727 2.17-1.49 3.118c.09.358.254.69.412 1.02c.307.642.651 1.418.707 2.981c.117 3.24-2.51 6.175-5.789 6.593c1.17-1.187 1.815-2.444 2.12-3.375c.606-1.846.508-3.316.055-4.44a4.46 4.46 0 0 0-1.782-2.141c-1.683-1.02-3.22-1.09-4.444-.762c.465-.594.876-1.201 1.2-1.864c.584-1.65-.102-2.848-.704-3.519c-.192-.246-.061-.655.305-.655c1.41 0 2.813.02 4.22.115M3.32 19.107c1.924-2.202 4.712-5.394 7.162-8.15c.559-.63 2.769-2.338 5.748-.533c.878.532 2.43 2.165 1.332 5.51c-.803 2.446-4.408 7.796-15.76 5.844c-.227-.039-.511-.354-.218-.687z"/></svg>'
    }
  },
  {
    ariaLabel: "Tdahuyou B \u7AD9\u4E3B\u9875\u94FE\u63A5",
    link: "https://space.bilibili.com/407241004",
    icon: {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024"><g fill="currentColor"><path d="M310.134 596.45c-7.999-4.463-16.498-8.43-24.997-11.9a274 274 0 0 0-26.996-7.438c-2.5-.992-2.5.991-2.5 1.487c0 7.934.5 18.843 1.5 27.768c1 7.438 2 15.372 4 22.81c0 .496 0 .991.5 1.487c.999.992 1.999 1.488 2.999.496c7.999-4.463 15.998-8.43 22.997-13.388c7.499-5.454 15.498-11.9 21.997-18.347c1.5-1.487 0-2.479.5-2.975m323.96-11.9a274 274 0 0 0-26.997-7.438c-2.5-.992-2.5.991-2.5 1.487c0 7.934.5 18.843 1.5 27.768c1 7.438 2 15.372 4 22.81c0 .496 0 .991.5 1.487c1 .992 2 1.488 3 .496c7.999-4.463 15.998-8.43 22.997-13.388c7.499-5.454 15.498-11.9 21.997-18.347c2-1.487.5-2.479.5-2.975c-7.5-4.463-16.498-8.43-24.997-11.9"/><path d="M741.496 112H283c-94.501 0-171 76.5-171 171.5v458c.5 94 77 170.5 170.999 170.5h457.997c94.5 0 171.002-76.5 171.002-170.5v-458c.497-95-76.002-171.5-170.502-171.5m95 343.5h15.5v48h-15.5zm-95.5-1.5l2 43l-13.5 1.5l-5-44.5zm-23.5 0l4 45.5l-14.5 1.5l-6.5-47.5h17zm-230.498 1.5h15v48h-15zm-96-1.5l2 43l-13.5 1.5l-5-44.5zm-23.5 0l4 45.5l-14.5 2l-6-47.5zm-3.5 149C343.498 668.5 216 662.5 204.5 660.5C195.5 499 181.5 464 170 385l54.5-22.5c1 71.5 9 185 9 185s108.5-15.5 132 47c.5 3 0 6-1.5 8.5m20.5 35.5l-23.5-124h35.5l13 123zm44.5-8l-27-235l33.5-1.5l21 236H429zm34-175h17.5v48H467zm41 190h-26.5l-9.5-126h36zm209.998-43C693.496 668 565.997 662 554.497 660c-9-161-23-196-34.5-275l54.5-22.5c1 71.5 9 185 9 185s108.5-15.5 132 46.5c.5 3 0 6-1.5 8.5m19.5 36l-23-124h35.5l13 123zm45.5-8l-27.5-235l33.5-1.5l21 236h-27zm33.5-175h17.5v48h-13zm41 190h-26.5l-9.5-126h36z"/></g></svg>'
    }
  },
  {
    ariaLabel: "TNotes.typescript github \u4ED3\u5E93\u94FE\u63A5",
    link: "https://github.com/tnotesjs/TNotes.typescript",
    icon: "github"
  }
];

// sidebar.json
var sidebar_default = [{ text: "1. \u5B66\u4E60\u8D44\u6599", collapsed: true, items: [{ text: "\u2705 TypeScript\uFF08\u962E\u4E00\u5CF0\uFF09", link: "/notes/0002. TypeScript\uFF08\u962E\u4E00\u5CF0\uFF09/README" }, { text: "\u2705 \u672F\u8BED\u8868", link: "/notes/0054. \u672F\u8BED\u8868/README" }, { text: "\u2705 roadmap", link: "/notes/0039. roadmap/README" }] }, { text: "2. TS \u7B80\u4ECB", collapsed: true, items: [{ text: "\u2705 TS \u7B80\u4ECB", link: "/notes/0008. TS \u7B80\u4ECB/README" }, { text: "\u2705 TS \u662F\u4EC0\u4E48", link: "/notes/0001. TS \u662F\u4EC0\u4E48/README" }, { text: "\u2705 TS \u7684\u53D1\u5C55\u7B80\u53F2", link: "/notes/0003. TS \u7684\u53D1\u5C55\u7B80\u53F2/README" }, { text: "\u2705 TS \u7684\u535A\u5BA2", link: "/notes/0005. TS \u7684\u535A\u5BA2/README" }, { text: "\u2705 \u7C7B\u578B vs. \u503C", link: "/notes/0004. \u7C7B\u578B vs. \u503C/README" }, { text: "\u2705 \u9762\u5411\u5BF9\u8C61\u7684\u601D\u7EF4\u65B9\u5F0F", link: "/notes/0006. \u9762\u5411\u5BF9\u8C61\u7684\u601D\u7EF4\u65B9\u5F0F/README" }, { text: "\u2705 \u52A8\u6001\u7C7B\u578B vs. \u9759\u6001\u7C7B\u578B", link: "/notes/0007. \u52A8\u6001\u7C7B\u578B vs. \u9759\u6001\u7C7B\u578B/README" }] }, { text: "3. \u57FA\u672C\u7528\u6CD5", collapsed: true, items: [{ text: "\u2705 \u57FA\u672C\u7528\u6CD5", link: "/notes/0044. \u57FA\u672C\u7528\u6CD5/README" }, { text: "\u2705 \u7C7B\u578B\u58F0\u660E\u548C\u7C7B\u578B\u63A8\u65AD", link: "/notes/0009. \u7C7B\u578B\u58F0\u660E\u548C\u7C7B\u578B\u63A8\u65AD/README" }, { text: "\u2705 TS \u7684\u7F16\u8BD1", link: "/notes/0010. TS \u7684\u7F16\u8BD1/README" }, { text: "\u2705 TS Playground", link: "/notes/0011. TS Playground/README" }, { text: "\u2705 tsc \u57FA\u672C\u4F7F\u7528", link: "/notes/0012. tsc \u57FA\u672C\u4F7F\u7528/README" }, { text: "\u2705 ts-node \u57FA\u672C\u4F7F\u7528", link: "/notes/0013. ts-node \u57FA\u672C\u4F7F\u7528/README" }, { text: "\u2705 nodemon \u57FA\u672C\u4F7F\u7528", link: "/notes/0041. nodemon \u57FA\u672C\u4F7F\u7528/README" }, { text: "\u2705 ts-node-dev \u57FA\u672C\u4F7F\u7528", link: "/notes/0042. ts-node-dev \u57FA\u672C\u4F7F\u7528/README" }] }, { text: "4. \u9876\u5C42\u7C7B\u578B\u548C\u5E95\u5C42\u7C7B\u578B", collapsed: true, items: [{ text: "\u2705 \u9876\u5C42\u7C7B\u578B\u548C\u5E95\u5C42\u7C7B\u578B", link: "/notes/0046. \u9876\u5C42\u7C7B\u578B\u548C\u5E95\u5C42\u7C7B\u578B/README" }, { text: "\u2705 any \u7C7B\u578B", link: "/notes/0014. any \u7C7B\u578B/README" }, { text: "\u2705 unknown \u7C7B\u578B", link: "/notes/0015. unknown \u7C7B\u578B/README" }, { text: "\u2705 never \u7C7B\u578B", link: "/notes/0016. never \u7C7B\u578B/README" }] }, { text: "5. \u7C7B\u578B\u7CFB\u7EDF\u57FA\u7840\u77E5\u8BC6", collapsed: true, items: [{ text: "\u2705 boolean \u7C7B\u578B", link: "/notes/0018. boolean \u7C7B\u578B/README" }, { text: "\u2705 string \u7C7B\u578B", link: "/notes/0019. string \u7C7B\u578B/README" }, { text: "\u2705 number \u7C7B\u578B", link: "/notes/0020. number \u7C7B\u578B/README" }, { text: "\u2705 bigint \u7C7B\u578B", link: "/notes/0021. bigint \u7C7B\u578B/README" }, { text: "\u2705 symbol \u7C7B\u578B", link: "/notes/0022. symbol \u7C7B\u578B/README" }, { text: "\u2705 object \u7C7B\u578B\u548C Object \u7C7B\u578B", link: "/notes/0023. object \u7C7B\u578B\u548C Object \u7C7B\u578B/README" }, { text: "\u2705 undefined \u7C7B\u578B\u548C null \u7C7B\u578B", link: "/notes/0024. undefined \u7C7B\u578B\u548C null \u7C7B\u578B/README" }, { text: "\u2705 \u5305\u88C5\u5BF9\u8C61\u7C7B\u578B", link: "/notes/0047. \u5305\u88C5\u5BF9\u8C61\u7C7B\u578B/README" }, { text: "\u2705 \u5B57\u9762\u91CF\u7C7B\u578B", link: "/notes/0025. \u5B57\u9762\u91CF\u7C7B\u578B/README" }, { text: "\u2705 \u8054\u5408\u7C7B\u578B", link: "/notes/0026. \u8054\u5408\u7C7B\u578B/README" }, { text: "\u2705 \u4EA4\u53C9\u7C7B\u578B", link: "/notes/0027. \u4EA4\u53C9\u7C7B\u578B/README" }, { text: "\u2705 type \u5173\u952E\u5B57", link: "/notes/0028. type \u5173\u952E\u5B57/README" }, { text: "\u2705 typeof \u8FD0\u7B97\u7B26", link: "/notes/0029. typeof \u8FD0\u7B97\u7B26/README" }, { text: "\u2705 \u7C7B\u578B\u4F5C\u7528\u57DF", link: "/notes/0030. \u7C7B\u578B\u4F5C\u7528\u57DF/README" }] }, { text: "6. \u7C7B\u578B\u517C\u5BB9\u6027", collapsed: true, items: [{ text: "\u2705 \u7C7B\u578B\u517C\u5BB9\u6027", link: "/notes/0031. \u7C7B\u578B\u517C\u5BB9\u6027/README" }, { text: "\u2705 \u7ED3\u6784\u5B50\u7C7B\u578B", link: "/notes/0067. \u7ED3\u6784\u5B50\u7C7B\u578B/README" }, { text: "\u2705 \u7C7B\u578B\u7684\u7236\u5B50\u5173\u7CFB", link: "/notes/0072. \u7C7B\u578B\u7684\u7236\u5B50\u5173\u7CFB/README" }, { text: "\u2705 \u5BF9\u8C61\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219", link: "/notes/0068. \u5BF9\u8C61\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219/README" }, { text: "\u2705 \u51FD\u6570\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219", link: "/notes/0069. \u51FD\u6570\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219/README" }, { text: "\u2705 \u7C7B\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219", link: "/notes/0071. \u7C7B\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219/README" }, { text: "\u23F0 \u6CDB\u578B\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219", link: "/notes/0070. \u6CDB\u578B\u7C7B\u578B\u7684\u517C\u5BB9\u6027\u89C4\u5219/README" }, { text: "\u2705 \u7279\u6B8A\u7C7B\u578B\u4E4B\u95F4\u7684\u517C\u5BB9\u6027", link: "/notes/0017. \u7279\u6B8A\u7C7B\u578B\u4E4B\u95F4\u7684\u517C\u5BB9\u6027/README" }] }, { text: "7. \u6570\u7EC4", collapsed: true, items: [{ text: "\u2705 \u6570\u7EC4\u7C7B\u578B", link: "/notes/0032. \u6570\u7EC4\u7C7B\u578B/README" }] }, { text: "8. \u5143\u7EC4", collapsed: true, items: [{ text: "\u2705 \u5143\u7EC4\u7C7B\u578B", link: "/notes/0036. \u5143\u7EC4\u7C7B\u578B/README" }] }, { text: "9. \u51FD\u6570", collapsed: true, items: [{ text: "\u2705 \u51FD\u6570\u7C7B\u578B", link: "/notes/0034. \u51FD\u6570\u7C7B\u578B/README" }] }, { text: "10. \u5BF9\u8C61", collapsed: true, items: [{ text: "\u2705 \u5BF9\u8C61\u7C7B\u578B", link: "/notes/0033. \u5BF9\u8C61\u7C7B\u578B/README" }] }, { text: "11. \u63A5\u53E3", collapsed: true, items: [{ text: "\u2705 interface \u5173\u952E\u5B57", link: "/notes/0052. interface \u5173\u952E\u5B57/README" }, { text: "\u2705 type vs. interface", link: "/notes/0053. type vs. interface/README" }] }, { text: "12. \u7C7B", collapsed: true, items: [{ text: "\u23F0 class \u7C7B\u578B", link: "/notes/0035. class \u7C7B\u578B/README" }, { text: "\u2705 \u7C7B\u5C5E\u6027\u4E25\u683C\u521D\u59CB\u5316", link: "/notes/0066. \u7C7B\u5C5E\u6027\u4E25\u683C\u521D\u59CB\u5316/README" }, { text: "\u2705 \u7C7B\u4E2D\u7684\u53C2\u6570\u5C5E\u6027", link: "/notes/0056. \u7C7B\u4E2D\u7684\u53C2\u6570\u5C5E\u6027/README" }, { text: "\u23F0 \u62BD\u8C61\u7C7B", link: "/notes/0057. \u62BD\u8C61\u7C7B/README" }, { text: "\u2705 \u7C7B\u4E2D\u7684\u5B58\u53D6\u5668", link: "/notes/0058. \u7C7B\u4E2D\u7684\u5B58\u53D6\u5668/README" }, { text: "\u2705 \u7C7B\u5B9E\u73B0\u63A5\u53E3", link: "/notes/0059. \u7C7B\u5B9E\u73B0\u63A5\u53E3/README" }, { text: "\u2705 \u7C7B\u4E2D\u7684\u53EA\u8BFB\u5C5E\u6027", link: "/notes/0060. \u7C7B\u4E2D\u7684\u53EA\u8BFB\u5C5E\u6027/README" }, { text: "\u2705 \u7C7B\u7684\u9759\u6001\u6210\u5458", link: "/notes/0061. \u7C7B\u7684\u9759\u6001\u6210\u5458/README" }, { text: "\u2705 \u7C7B\u7684\u4E09\u4E2A\u53EF\u8BBF\u95EE\u6027\u4FEE\u9970\u7B26", link: "/notes/0062. \u7C7B\u7684\u4E09\u4E2A\u53EF\u8BBF\u95EE\u6027\u4FEE\u9970\u7B26/README" }, { text: "\u2705 \u7C7B\u7684\u7EE7\u627F", link: "/notes/0064. \u7C7B\u7684\u7EE7\u627F/README" }, { text: "\u23F0 \u5B50\u7C7B\u91CD\u5199\u7236\u7C7B\u540C\u540D\u6210\u5458", link: "/notes/0063. \u5B50\u7C7B\u91CD\u5199\u7236\u7C7B\u540C\u540D\u6210\u5458/README" }, { text: "\u2705 \u7C7B\u4E2D\u7684 this \u53C2\u6570\u548C this \u7C7B\u578B", link: "/notes/0055. \u7C7B\u4E2D\u7684 this \u53C2\u6570\u548C this \u7C7B\u578B/README" }, { text: "\u2705 \u7C7B\u4E0E\u51FD\u6570\u7684\u9009\u62E9", link: "/notes/0065. \u7C7B\u4E0E\u51FD\u6570\u7684\u9009\u62E9/README" }] }, { text: "13. \u6CDB\u578B", collapsed: true, items: [{ text: "\u23F0 \u6CDB\u578B", link: "/notes/0038. \u6CDB\u578B/README" }] }, { text: "14. Enum \u7C7B\u578B", collapsed: true, items: [{ text: "\u23F0 Enum \u7C7B\u578B", link: "/notes/0037. Enum \u7C7B\u578B/README" }] }, { text: "15. \u7C7B\u578B\u65AD\u8A00", collapsed: true, items: [{ text: "\u23F0 \u7C7B\u578B\u65AD\u8A00", link: "/notes/0051. \u7C7B\u578B\u65AD\u8A00/README" }, { text: "\u23F0 \u7C7B\u578B\u65AD\u8A00\u7684\u6761\u4EF6", link: "/notes/0040. \u7C7B\u578B\u65AD\u8A00\u7684\u6761\u4EF6/README" }, { text: "\u23F0 as const \u65AD\u8A00", link: "/notes/0048. as const \u65AD\u8A00/README" }, { text: "\u23F0 \u975E\u7A7A\u65AD\u8A00", link: "/notes/0049. \u975E\u7A7A\u65AD\u8A00/README" }, { text: "\u23F0 \u65AD\u8A00\u51FD\u6570", link: "/notes/0050. \u65AD\u8A00\u51FD\u6570/README" }] }, { text: "16. \u6A21\u5757", collapsed: true, items: [] }, { text: "17. namespace", collapsed: true, items: [] }, { text: "18. \u88C5\u9970\u5668", collapsed: true, items: [] }, { text: "19. \u88C5\u9970\u5668\uFF08\u65E7\u8BED\u6CD5\uFF09", collapsed: true, items: [] }, { text: "20. declare \u5173\u952E\u5B57", collapsed: true, items: [] }, { text: "21. d.ts \u7C7B\u578B\u58F0\u660E\u6587\u4EF6", collapsed: true, items: [] }, { text: "22. \u7C7B\u578B\u8FD0\u7B97\u7B26", collapsed: true, items: [] }, { text: "23. \u7C7B\u578B\u6620\u5C04", collapsed: true, items: [] }, { text: "24. \u7C7B\u578B\u5DE5\u5177", collapsed: true, items: [] }, { text: "25. \u6CE8\u91CA\u6307\u4EE4", collapsed: true, items: [] }, { text: "26. tsconfig.json \u6587\u4EF6", collapsed: true, items: [] }, { text: "27. tsc \u547D\u4EE4", collapsed: true, items: [] }, { text: "28. \u6DF1\u5165\u539F\u7406", collapsed: true, items: [{ text: "\u23F0 \u6DF1\u5165\u539F\u7406", link: "/notes/0045. \u6DF1\u5165\u539F\u7406/README" }, { text: "\u2705 Source Map \u7684\u57FA\u672C\u6982\u5FF5\u548C\u539F\u7406", link: "/notes/0043. Source Map \u7684\u57FA\u672C\u6982\u5FF5\u548C\u539F\u7406/README" }] }, { text: "29. \u7A7A", collapsed: true, items: [] }];

// .vitepress/plugins/hmr.js
import fs2 from "fs";
import path4 from "path";

// .vitepress/tnotes/constants.js
import path3 from "path";
import { fileURLToPath as fileURLToPath2 } from "url";
import { v4 as uuidv4 } from "file:///C:/tnotesjs/TNotes.typescript/node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm/index.js";

// .vitepress/tnotes/utils/add_number_to_title.js
function createAddNumberToTitle() {
  const titleNumbers = Array(7).fill(0);
  return function addNumberToTitle(title) {
    const match = title.match(
      /^(\#+)\s*((\d+(\.\d*)?(\.\d*)?(\.\d*)?(\.\d*)?(\.\d*)?)\.\s*)?(.*)/
      // !注意：windows 环境下，读到的 title 结尾会带有一个 /r，在正则匹配的时候，不要记上结尾 $
    );
    const plainTitle = match ? match[9].trim() : title.trim();
    const level = title.indexOf(" ");
    const baseLevel = 2;
    if (level === 1) return [title, plainTitle];
    for (let i = level + 1; i < titleNumbers.length; i++) titleNumbers[i] = 0;
    titleNumbers[level] += 1;
    const newNumber = titleNumbers.slice(baseLevel, level + 1).join(".");
    const headerSymbol = title.slice(0, level).trim();
    const newTitle = `${headerSymbol} ${newNumber}. ${plainTitle}`;
    return [newTitle, plainTitle];
  };
}

// .vitepress/tnotes/utils/gen_anchor.js
import GithubSlugger from "file:///C:/tnotesjs/TNotes.typescript/node_modules/.pnpm/github-slugger@2.0.0/node_modules/github-slugger/index.js";
var slugger = new GithubSlugger();
var generateAnchor = (label) => {
  slugger.reset();
  return slugger.slug(label);
};

// .vitepress/tnotes/utils/gen_toc.js
function generateToc(titles, baseLevel = 2) {
  const toc = titles.map((title) => {
    const level = title.indexOf(" ");
    const text = title.slice(level).trim();
    const anchor = generateAnchor(text);
    return " ".repeat((level - baseLevel) * 2) + `- [${text}](#${anchor})`;
  }).join(EOL);
  return `${EOL}${toc}${EOL}`;
}

// .vitepress/tnotes/utils/get_git_timestamp.js
import { exec } from "child_process";
import { promisify } from "util";

// .vitepress/tnotes/utils/get_changed_ids.js
import path from "path";
import { execSync } from "child_process";
function getChangedIds() {
  const changedFiles = execSync(
    `git diff --name-only HEAD -- "notes/[0-9][0-9][0-9][0-9]*/README.md"`
    // 根据当前仓库状态和最近一次提交之间的比较
  ).toString().split(/\r?\n/).filter(Boolean).map((fp) => fp.replace(/^"|"$/g, "")).map((fp) => fp.split("/").join(path.sep));
  const changedIds2 = changedFiles.map((fp) => {
    const parts = fp.split(path.sep);
    const dirName = parts.find((p, i) => parts[i - 1] === "notes");
    return dirName?.slice(0, 4);
  }).filter(Boolean);
  console.log("\u672C\u6B21\u66F4\u65B0\u7684\u7B14\u8BB0 ID \u96C6\u5408:", changedIds2);
  return new Set(changedIds2);
}

// .vitepress/tnotes/utils/get_git_timestamp.js
var execAsync = promisify(exec);
var changedIds = getChangedIds();

// .vitepress/tnotes/utils/get_tnotes_config.js
import fs from "fs";
import path2 from "path";
import { fileURLToPath } from "url";
var __vite_injected_original_import_meta_url = "file:///C:/tnotesjs/TNotes.typescript/.vitepress/tnotes/utils/get_tnotes_config.js";
var __dirname = path2.dirname(fileURLToPath(__vite_injected_original_import_meta_url));
var tnotes_config = null;
var tnotes_config_path = path2.normalize(
  path2.resolve(__dirname, "..", "..", "..", ".tnotes.json")
);
function getTnotesConfig() {
  if (tnotes_config) return tnotes_config;
  tnotes_config = JSON.parse(fs.readFileSync(tnotes_config_path));
  return tnotes_config;
}

// .vitepress/tnotes/constants.js
var __vite_injected_original_import_meta_url2 = "file:///C:/tnotesjs/TNotes.typescript/.vitepress/tnotes/constants.js";
var {
  author: author2,
  ignore_dirs: ignore_dirs2,
  repoName: repoName2,
  socialLinks: socialLinks2,
  menuItems: menuItems2,
  sidebar_isNotesIDVisible,
  sidebar_isCollapsed,
  port,
  rootSidebarDir,
  root_item
} = getTnotesConfig();
var BILIBILI_VIDEO_BASE_URL = "https://www.bilibili.com/video/";
var TNOTES_YUQUE_BASE_URL = "https://www.yuque.com/tdahuyou/tnotes.yuque/";
var __dirname2 = path3.dirname(fileURLToPath2(__vite_injected_original_import_meta_url2));
var TNOTES_BASE_DIR = path3.resolve(__dirname2, "..", "..", "..");
var EN_WORDS_DIR = path3.resolve(TNOTES_BASE_DIR, "TNotes.en-words");
var ROOT_DIR_PATH = path3.resolve(__dirname2, "..", "..");
var ROOT_README_PATH = path3.resolve(ROOT_DIR_PATH, "README.md");
var ROOT_CONFIG_PATH = path3.resolve(ROOT_DIR_PATH, ".tnotes.json");
var NOTES_DIR_PATH = path3.resolve(ROOT_DIR_PATH, "notes");
var VP_DIR_PATH = path3.resolve(ROOT_DIR_PATH, ".vitepress");
var PUBLIC_PATH = path3.resolve(ROOT_DIR_PATH, "public");
var GITHUB_DIR_PATH = path3.resolve(ROOT_DIR_PATH, ".github");
var GITHUB_DEPLOYYML_PATH = path3.resolve(
  GITHUB_DIR_PATH,
  "workflows",
  "deploy.yml"
);
var VP_TOC_PATH = path3.resolve(ROOT_DIR_PATH, "TOC.md");
var VP_SIDEBAR_PATH = path3.resolve(ROOT_DIR_PATH, "sidebar.json");
var ROOT_PKG_PATH = path3.resolve(ROOT_DIR_PATH, "package.json");
var VSCODE_SETTINGS_PATH = path3.resolve(
  ROOT_DIR_PATH,
  ".vscode",
  "settings.json"
);
var VSCODE_TASKS_PATH = path3.resolve(
  ROOT_DIR_PATH,
  ".vscode",
  "tasks.json"
);
var EOL = "\n";
var MERGED_README_FILENAME = "MERGED_README.md";
var MERGED_README_PATH = path3.resolve(
  ROOT_DIR_PATH,
  MERGED_README_FILENAME
);
var NOTES_TOC_START_TAG = "<!-- region:toc -->";
var NOTES_TOC_END_TAG = "<!-- endregion:toc -->";
var REPO_URL = `https://github.com/${author2}/${repoName2}/tree/main`;
var REPO_NOTES_URL = `https://github.com/${author2}/${repoName2}/tree/main/notes`;
var REPO_BLOB_URL_1 = `https://github.com/${author2}/${repoName2}/blob/main/notes`;
var GITHUB_PAGE_URL = `https://tnotesjs.github.io/${repoName2}`;
var GITHUB_PAGE_NOTES_URL = `https://tnotesjs.github.io/${repoName2}/notes`;

// .vitepress/plugins/hmr.js
async function TN_HMR_Plugin() {
  return {
    name: "tn-hmr-plugin",
    configureServer(server) {
      const HANDLE_DURATION = 3 * 1e3;
      let lastHandleTime = Date.now();
      let isHmrEnable = true;
      server.watcher.on("all", async (event, filePath) => {
        if (Date.now() - lastHandleTime < HANDLE_DURATION || // 如果最近两次更新的时间需要小于 UPDATE_TIMEOUT 阈值，直接 return
        !isHmrEnable) {
          return;
        }
        console.log("[hmr]", filePath);
        lastHandleTime = Date.now();
        isHmrEnable = false;
        try {
          const basename = path4.basename(filePath);
          const notesStats = await fs2.promises.lstat(filePath);
          const notesDirName = path4.basename(path4.dirname(filePath));
          if (basename === "README.md" && notesStats.isFile() && notesDirName.match(/^\d{4}.\s/) && !ignore_dirs2.includes(notesDirName)) {
            const startTime = Date.now();
            let lines = await fs2.promises.readFile(filePath, "utf-8");
            lines = lines.split(EOL);
            lines[0] = `# [${notesDirName}](${REPO_NOTES_URL}/${encodeURIComponent(
              notesDirName
            )})`;
            let startLineIdx = -1, endLineIdx = -1;
            lines.forEach((line, idx) => {
              if (line.startsWith(NOTES_TOC_START_TAG)) startLineIdx = idx;
              if (line.startsWith(NOTES_TOC_END_TAG)) endLineIdx = idx;
            });
            if (startLineIdx !== -1 && endLineIdx !== -1) {
              const notesID = notesDirName.slice(0, 4);
              const titles = [];
              const headers = ["## ", "### ", "#### ", "##### ", "###### "];
              const addNumberToTitle = createAddNumberToTitle();
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                const isHeader = headers.some(
                  (header) => line.startsWith(header)
                );
                if (isHeader) {
                  const [numberedTitle] = addNumberToTitle(line);
                  titles.push(numberedTitle);
                  lines[i] = numberedTitle;
                }
              }
              const toc = generateToc(titles, 2);
              let bilibiliTOCItems = [];
              let tnotesTOCItems = [];
              let yuqueTOCItems = [];
              const configPath = path4.resolve(
                path4.dirname(filePath),
                ".tnotes.json"
              );
              let notesConfig = await fs2.promises.readFile(configPath, "utf8");
              notesConfig = JSON.parse(notesConfig);
              if (notesConfig) {
                if (notesConfig.bilibili.length > 0) {
                  bilibiliTOCItems = notesConfig.bilibili.map(
                    (bvid, i) => `  - [bilibili.${repoName2}.${notesID}.${i + 1}](${BILIBILI_VIDEO_BASE_URL + bvid})`
                  );
                }
                if (notesConfig.tnotes.length > 0) {
                  tnotesTOCItems = notesConfig.tnotes.map(
                    ([tnotesName, notesID2, notesName], i) => `  - [TNotes.${tnotesName} - ${notesID2 + (notesName ? `. ${notesName}/README` : "")}](${`https://tnotesjs.github.io/TNotes.${tnotesName}/notes/` + notesID2 + (notesName ? `.%20${encodeURIComponent(notesName)}/README` : "")})`
                  );
                }
                if (notesConfig.yuque.length > 0) {
                  yuqueTOCItems = notesConfig.yuque.map(
                    (slug, i) => `  - [TNotes.yuque.${repoName2.replace(
                      "TNotes.",
                      ""
                    )}.${notesID}](${TNOTES_YUQUE_BASE_URL + slug})`
                  );
                }
              }
              const insertTocItems = [];
              if (bilibiliTOCItems.length > 0) {
                insertTocItems.push(
                  `- [\u{1F4FA} bilibili \u{1F449} TNotes \u5408\u96C6](https://space.bilibili.com/407241004)`,
                  ...bilibiliTOCItems
                );
              }
              if (tnotesTOCItems.length > 0) {
                insertTocItems.push(
                  `- [\u{1F4D2} TNotes](https://tnotesjs.github.io/TNotes/)`,
                  ...tnotesTOCItems
                );
              }
              if (yuqueTOCItems.length > 0) {
                insertTocItems.push(
                  `- [\u{1F4C2} TNotes.yuque](${TNOTES_YUQUE_BASE_URL})`,
                  ...yuqueTOCItems
                );
              }
              lines.splice(
                startLineIdx + 1,
                endLineIdx - startLineIdx - 1,
                "",
                ...insertTocItems,
                ...toc.replace(new RegExp(`^${EOL}`), "").split(EOL)
              );
            }
            await fs2.promises.writeFile(filePath, lines.join(EOL));
            console.log(`\u{1F680} ${Date.now() - startTime} ms`);
          }
        } catch (err) {
          if (event !== "unlinkDir" && !["ENOENT", "ENOTDIR"].includes(err.code)) {
            console.log("\u274C tn hmr error", err);
          }
        } finally {
          isHmrEnable = true;
        }
      });
    }
  };
}

// .vitepress/config.mts
import fs3 from "fs";
import path5 from "path";
var IGNORE_LIST = [
  "./README.md",
  "./MERGED_README.md",
  ...ignore_dirs.map((dir) => `**/${dir}/**`)
];
var github_page_url = "https://" + author.toLowerCase() + ".github.io/" + repoName + "/";
var config_default = defineConfig({
  appearance: "dark",
  base: "/" + repoName + "/",
  cleanUrls: true,
  description: repoName,
  head: head(),
  ignoreDeadLinks: true,
  lang: "zh-Hans",
  /*
   * 笔记的创建时间和最后更新时间直接写入 ./notes/xxx/.tnotes.json 配置文件中
   * created_at: ...,
   * updated_at: ...,
   *
   * 备注：
   * 直接使用内置的 lastUpdated 来计算，在笔记数量较多（比如 leetcode 3k+）的情况下，经常会在 build 的时候遇到 vitepress 的报错：[vitepress] spawn EBADF。
   * 经过排查是因为 vitepress 内部使用的 git-log 命令在处理大量文件时会失败（怀疑是命令行参数过长导致），所以只能放弃内置的 lastUpdated 功能，改为手动维护。
   * */
  lastUpdated: false,
  markdown: markdown(),
  router: {
    prefetchLinks: false
  },
  sitemap: {
    hostname: github_page_url,
    lastmodDateOnly: false
  },
  // https://vitepress.dev/reference/default-theme-config
  themeConfig: themeConfig(),
  title: repoName,
  srcExclude: IGNORE_LIST,
  vite: {
    server: {
      watch: {
        ignored: IGNORE_LIST
        // awaitWriteFinish: {
        //   stabilityThreshold: 5000, // 文件大小稳定 1000ms 后触发
        //   pollInterval: 1000, // 每 100ms 检查一次文件大小
        // },
        // usePolling: true, // 启用轮询机制（更稳定但稍耗资源） 解决 WSL/macOS 常见监听问题
      }
      // 避免内存溢出（大型文档库必备）
      // warmup: {
      //   clientFiles: ['./**/*.md'],
      // },
    },
    plugins: [TN_HMR_Plugin()]
  }
});
function head() {
  const head2 = [
    [
      "meta",
      {
        name: "keywords",
        content: keywords.join(", ")
      }
    ],
    ["meta", { name: "author", content: author }],
    ["link", { rel: "canonical", href: github_page_url }],
    ["link", { rel: "icon", href: github_page_url + "favicon.ico" }],
    ["link", { rel: "preconnect", href: "https://fonts.googleapis.com" }]
  ];
  return head2;
}
var simpleMermaidMarkdown = (md) => {
  const fence = md.renderer.rules.fence ? md.renderer.rules.fence.bind(md.renderer.rules) : () => "";
  md.renderer.rules.fence = (tokens, index, options, env, slf) => {
    const token = tokens[index];
    if (token.info.trim() === "mermaid") {
      try {
        const key = `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        const content = token.content;
        return `<Mermaid id="${key}" graph="${encodeURIComponent(content)}" />`;
      } catch (err) {
        return `<pre>${err}</pre>`;
      }
    }
    if (token.info.trim() === "mmd") {
      tokens[index].info = "mermaid";
    }
    return fence(tokens, index, options, env, slf);
  };
};
function markdown() {
  const markdown2 = {
    lineNumbers: true,
    math: true,
    config(md) {
      md.core.ruler.before("normalize", "save-source", (state) => {
        state.env.source = state.src;
        return true;
      });
      simpleMermaidMarkdown(md);
      md.use(markdownItContainer, "markmap", {
        marker: "`",
        validate(params) {
          const p = (params || "").trim();
          return p.startsWith("markmap");
        },
        render() {
          return "";
        }
      });
      md.core.ruler.after("block", "tn_replace_markmap_container", (state) => {
        const src = state.env.source || "";
        const lines = src.split("\n");
        const tokens = state.tokens;
        for (let i = 0; i < tokens.length; i++) {
          const t = tokens[i];
          if (t.type === "container_markmap_open") {
            let j = i + 1;
            while (j < tokens.length && tokens[j].type !== "container_markmap_close")
              j++;
            if (j >= tokens.length) continue;
            const open = t;
            const startLine = open.map ? open.map[0] + 1 : null;
            const endLine = open.map ? open.map[1] - 1 : null;
            let params = {};
            if (open.map && typeof open.map[0] === "number") {
              const openLine = (lines[open.map[0]] || "").trim();
              let paramPart = "";
              const braceMatch = openLine.match(/\{([^}]*)\}/);
              if (braceMatch) {
                paramPart = braceMatch[1].trim();
              } else {
                const after = openLine.replace(/^`+\s*/, "");
                if (after.startsWith("markmap")) {
                  paramPart = after.slice("markmap".length).trim();
                }
              }
              if (paramPart) {
                const tokenArr = paramPart.match(/"[^"]*"|'[^']*'|\S+/g) || [];
                let startIdx = 0;
                if (tokenArr.length > 0 && /^\d+$/.test(tokenArr[0])) {
                  params.initialExpandLevel = Number(tokenArr[0]);
                  startIdx = 1;
                }
                for (let k = startIdx; k < tokenArr.length; k++) {
                  const pair = tokenArr[k];
                  if (!pair) continue;
                  const m = pair.match(/^([^=:\s]+)\s*(=|:)\s*(.+)$/);
                  if (m) {
                    const key = m[1];
                    let val = m[3];
                    if (/^".*"$/.test(val) && val.length >= 2 || /^'.*'$/.test(val) && val.length >= 2) {
                      val = val.slice(1, -1);
                    } else if (/^\d+$/.test(val)) {
                      val = String(Number(val));
                    }
                    params[key] = val;
                  }
                }
              }
            }
            let content = "";
            if (startLine !== null && endLine !== null) {
              for (let k = startLine; k <= endLine && k < lines.length; k++) {
                content += lines[k] + "\n";
              }
            } else {
              for (let k = i + 1; k < j; k++) {
                content += tokens[k].content || "";
              }
            }
            const firstNonEmptyLine = (content || "").split("\n").find((ln) => ln.trim() !== "") || "";
            const refMatch = firstNonEmptyLine.trim().match(/^<<<\s*(.+)$/);
            if (refMatch) {
              let refRaw = refMatch[1].trim().replace(/^['"]|['"]$/g, "");
              try {
                const env = state.env || {};
                const possibleRel = env.relativePath || env.path || env.filePath || env.file || "";
                let refFullPath = refRaw;
                if (!path5.isAbsolute(refRaw)) {
                  if (possibleRel) {
                    const currentDir = path5.dirname(possibleRel);
                    refFullPath = path5.resolve(
                      process.cwd(),
                      currentDir,
                      refRaw
                    );
                  } else {
                    refFullPath = path5.resolve(process.cwd(), refRaw);
                  }
                } else {
                  refFullPath = refRaw;
                }
                console.log("refFullPath:", refFullPath);
                const fileContent = fs3.readFileSync(refFullPath, "utf-8");
                content = fileContent;
              } catch (err) {
                content = `Failed to load referenced file: ${esc(
                  String(refRaw)
                )}

Error: ${esc(
                  String(err && err.message ? err.message : err)
                )}`;
              }
            }
            const encodedContent = encodeURIComponent(content.trim());
            let propsStr = `content="${encodedContent}"`;
            for (const [k, v] of Object.entries(params)) {
              if (typeof v === "number" || /^\d+$/.test(String(v))) {
                propsStr += ` :${k}="${v}"`;
              } else {
                const safe = String(v).replace(/"/g, "&quot;");
                propsStr += ` ${k}="${safe}"`;
              }
            }
            const html = `<MarkMap ${propsStr}></MarkMap>
`;
            let htmlToken;
            if (typeof state.Token === "function") {
              htmlToken = new state.Token("html_block", "", 0);
              htmlToken.content = html;
            } else {
              htmlToken = {
                type: "html_block",
                tag: "",
                attrs: null,
                map: null,
                nesting: 0,
                level: 0,
                children: null,
                content: html,
                block: true
              };
            }
            tokens.splice(i, j - i + 1, htmlToken);
          }
        }
        return true;
      });
      md.use(markdownItTaskLists);
      md.use(mila, {
        attrs: {
          target: "_self",
          rel: "noopener"
        }
      });
      function esc(s = "") {
        return s.replace(
          /[&<>"']/g,
          (ch) => ({
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;"
          })[ch]
        );
      }
      let __tn_swiper_uid = 0;
      let __tn_rules_stack = [];
      md.core.ruler.before("block", "tn_swiper_reset_uid", () => {
        __tn_swiper_uid = 0;
        __tn_rules_stack = [];
        return true;
      });
      md.use(markdownItContainer, "swiper", {
        render: (tokens, idx) => {
          if (tokens[idx].nesting === 1) {
            __tn_rules_stack.push({
              image: md.renderer.rules.image,
              pOpen: md.renderer.rules.paragraph_open,
              pClose: md.renderer.rules.paragraph_close
            });
            md.renderer.rules.paragraph_open = () => "";
            md.renderer.rules.paragraph_close = () => "";
            md.renderer.rules.image = (tokens2, i) => {
              const token = tokens2[i];
              const src = token.attrGet("src") || "";
              const alt = token.content || "";
              const title = alt && alt.trim() ? alt : "img";
              return `<div class="swiper-slide" data-title="${esc(
                title
              )}"><img src="${esc(src)}" alt="${esc(alt)}"></div>`;
            };
            const id = `tn-swiper-${++__tn_swiper_uid}`;
            return `
<div class="tn-swiper" data-swiper-id="${id}">
  <div class="tn-swiper-tabs"></div>
  <div class="swiper-container">
    <div class="swiper-wrapper">
`;
          } else {
            const prev = __tn_rules_stack.pop() || {
              image: null,
              pOpen: null,
              pClose: null
            };
            md.renderer.rules.image = prev.image;
            md.renderer.rules.paragraph_open = prev.pOpen;
            md.renderer.rules.paragraph_close = prev.pClose;
            return `
    </div>
    <!-- \u4E0B\u4E00\u9875\u6309\u94AE -->
    <!-- <div class="swiper-button-next"></div> -->
    <!-- \u4E0A\u4E00\u9875\u6309\u94AE -->
    <!-- <div class="swiper-button-prev"></div> -->
    <!-- \u5206\u9875\u5BFC\u822A -->
    <!-- <div class="swiper-pagination"></div> -->
  </div>
</div>
`;
          }
        }
      });
    },
    anchor: {
      slugify: generateAnchor
    },
    image: {
      lazyLoading: true
    }
  };
  return markdown2;
}
function themeConfig() {
  const themeConfig2 = {
    docFooter: {
      prev: "\u4E0A\u4E00\u7BC7",
      next: "\u4E0B\u4E00\u7BC7"
    },
    externalLinkIcon: true,
    outline: {
      level: [2, 3],
      label: "\u76EE\u5F55"
    },
    nav: [
      {
        text: "\u{1F440} TOC",
        link: "/TOC"
      },
      {
        text: "Menus",
        items: menuItems
      }
    ],
    search: {
      // 使用本地搜索（不依赖远程服务器）
      provider: "local",
      options: {
        miniSearch: {
          /**
           * 控制如何对文档进行分词、字段提取等预处理
           * @type {Pick<import('minisearch').Options, 'extractField' | 'tokenize' | 'processTerm'>}
           */
          options: {
            // 自定义分词逻辑
            tokenize: (text, language) => {
              if (language === "zh") {
                return text.match(/[\u4e00-\u9fa5]+|\S+/g) || [];
              }
              return text.split(/\s+/);
            },
            // 将所有词转为小写，确保大小写不敏感匹配
            processTerm: (term) => term.toLowerCase()
          },
          /**
           * 控制搜索时的行为（如模糊匹配、权重）
           * @type {import('minisearch').SearchOptions}
           * @default
           * { fuzzy: 0.2, prefix: true, boost: { title: 4, text: 2, titles: 1 } }
           */
          searchOptions: {
            fuzzy: 0.2,
            // 模糊匹配阈值（0-1），允许拼写错误的阈值（数值越低越严格）
            prefix: true,
            // 是否启用前缀匹配（输入“jav”可匹配“javascript”）
            boost: {
              title: 10,
              // 文件名作为 h1 标题，权重最高（这个 title 指的是 _render 返回结果 md.renderer html 中的第一个 h1，使用 folderName 作为第一个 h1，权重最高。）
              headings: 5,
              // h2 - h6
              text: 3,
              // 正文内容索引
              code: 1
              // 代码块索引权重
            }
          }
        },
        /**
         * 控制哪些 Markdown 内容参与本地搜索引擎索引
         * @param {string} src 当前 Markdown 文件的原始内容（即 .md 文件中的文本）
         * @param {import('vitepress').MarkdownEnv} env 包含当前页面环境信息的对象，比如 frontmatter、路径等
         * @param {import('markdown-it-async')} md 一个 Markdown 渲染器实例，用来将 Markdown 转换为 HTML
         */
        async _render(src, env, md) {
          const filePath = env.relativePath;
          if (filePath.includes("TOC.md")) return "";
          const notesIndex = filePath.indexOf("notes/");
          let folderName = "";
          if (notesIndex !== -1) {
            const pathAfterNotes = filePath.slice(notesIndex + "notes/".length);
            folderName = pathAfterNotes.split("/")[0];
          }
          const titleField = `# ${folderName}
`;
          const html = md.render(titleField + "\n\n" + src, env);
          return html;
        }
      }
    },
    sidebar: [...sidebar_default],
    socialLinks
  };
  return themeConfig2;
}
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLnZpdGVwcmVzcy9jb25maWcubXRzIiwgIi50bm90ZXMuanNvbiIsICJzaWRlYmFyLmpzb24iLCAiLnZpdGVwcmVzcy9wbHVnaW5zL2htci5qcyIsICIudml0ZXByZXNzL3Rub3Rlcy9jb25zdGFudHMuanMiLCAiLnZpdGVwcmVzcy90bm90ZXMvdXRpbHMvYWRkX251bWJlcl90b190aXRsZS5qcyIsICIudml0ZXByZXNzL3Rub3Rlcy91dGlscy9nZW5fYW5jaG9yLmpzIiwgIi52aXRlcHJlc3MvdG5vdGVzL3V0aWxzL2dlbl90b2MuanMiLCAiLnZpdGVwcmVzcy90bm90ZXMvdXRpbHMvZ2V0X2dpdF90aW1lc3RhbXAuanMiLCAiLnZpdGVwcmVzcy90bm90ZXMvdXRpbHMvZ2V0X2NoYW5nZWRfaWRzLmpzIiwgIi52aXRlcHJlc3MvdG5vdGVzL3V0aWxzL2dldF90bm90ZXNfY29uZmlnLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFxjb25maWcubXRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdC8udml0ZXByZXNzL2NvbmZpZy5tdHNcIjtpbXBvcnQgTWFya2Rvd25JdCBmcm9tICdtYXJrZG93bi1pdCdcclxuaW1wb3J0IG1hcmtkb3duSXRDb250YWluZXIgZnJvbSAnbWFya2Rvd24taXQtY29udGFpbmVyJ1xyXG5pbXBvcnQgbWlsYSBmcm9tICdtYXJrZG93bi1pdC1saW5rLWF0dHJpYnV0ZXMnXHJcbmltcG9ydCBtYXJrZG93bkl0VGFza0xpc3RzIGZyb20gJ21hcmtkb3duLWl0LXRhc2stbGlzdHMnXHJcbmltcG9ydCB7XHJcbiAgRGVmYXVsdFRoZW1lLFxyXG4gIGRlZmluZUNvbmZpZyxcclxuICBIZWFkQ29uZmlnLFxyXG4gIE1hcmtkb3duT3B0aW9ucyxcclxufSBmcm9tICd2aXRlcHJlc3MnXHJcblxyXG5pbXBvcnQge1xyXG4gIGF1dGhvcixcclxuICBpZ25vcmVfZGlycyxcclxuICBrZXl3b3JkcyxcclxuICBtZW51SXRlbXMsXHJcbiAgcmVwb05hbWUsXHJcbiAgc29jaWFsTGlua3MsXHJcbn0gZnJvbSAnLi4vLnRub3Rlcy5qc29uJ1xyXG5cclxuaW1wb3J0IHNpZGViYXIgZnJvbSAnLi4vc2lkZWJhci5qc29uJ1xyXG5pbXBvcnQgVE5fSE1SX1BsdWdpbiBmcm9tICcuL3BsdWdpbnMvaG1yJ1xyXG5cclxuaW1wb3J0IHsgZ2VuZXJhdGVBbmNob3IgfSBmcm9tICcuL3Rub3Rlcy91dGlscydcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJ1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5cclxuY29uc3QgSUdOT1JFX0xJU1QgPSBbXHJcbiAgJy4vUkVBRE1FLm1kJyxcclxuICAnLi9NRVJHRURfUkVBRE1FLm1kJyxcclxuICAuLi5pZ25vcmVfZGlycy5tYXAoKGRpcikgPT4gYCoqLyR7ZGlyfS8qKmApLFxyXG5dXHJcbmNvbnN0IGdpdGh1Yl9wYWdlX3VybCA9XHJcbiAgJ2h0dHBzOi8vJyArIGF1dGhvci50b0xvd2VyQ2FzZSgpICsgJy5naXRodWIuaW8vJyArIHJlcG9OYW1lICsgJy8nXHJcblxyXG4vLyBodHRwczovL3ZpdGVwcmVzcy5kZXYvcmVmZXJlbmNlL3NpdGUtY29uZmlnXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgYXBwZWFyYW5jZTogJ2RhcmsnLFxyXG4gIGJhc2U6ICcvJyArIHJlcG9OYW1lICsgJy8nLFxyXG4gIGNsZWFuVXJsczogdHJ1ZSxcclxuICBkZXNjcmlwdGlvbjogcmVwb05hbWUsXHJcbiAgaGVhZDogaGVhZCgpLFxyXG4gIGlnbm9yZURlYWRMaW5rczogdHJ1ZSxcclxuICBsYW5nOiAnemgtSGFucycsXHJcbiAgLypcclxuICAgKiBcdTdCMTRcdThCQjBcdTc2ODRcdTUyMUJcdTVFRkFcdTY1RjZcdTk1RjRcdTU0OENcdTY3MDBcdTU0MEVcdTY2RjRcdTY1QjBcdTY1RjZcdTk1RjRcdTc2RjRcdTYzQTVcdTUxOTlcdTUxNjUgLi9ub3Rlcy94eHgvLnRub3Rlcy5qc29uIFx1OTE0RFx1N0Y2RVx1NjU4N1x1NEVGNlx1NEUyRFxyXG4gICAqIGNyZWF0ZWRfYXQ6IC4uLixcclxuICAgKiB1cGRhdGVkX2F0OiAuLi4sXHJcbiAgICpcclxuICAgKiBcdTU5MDdcdTZDRThcdUZGMUFcclxuICAgKiBcdTc2RjRcdTYzQTVcdTRGN0ZcdTc1MjhcdTUxODVcdTdGNkVcdTc2ODQgbGFzdFVwZGF0ZWQgXHU2NzY1XHU4QkExXHU3Qjk3XHVGRjBDXHU1NzI4XHU3QjE0XHU4QkIwXHU2NTcwXHU5MUNGXHU4RjgzXHU1OTFBXHVGRjA4XHU2QkQ0XHU1OTgyIGxlZXRjb2RlIDNrK1x1RkYwOVx1NzY4NFx1NjBDNVx1NTFCNVx1NEUwQlx1RkYwQ1x1N0VDRlx1NUUzOFx1NEYxQVx1NTcyOCBidWlsZCBcdTc2ODRcdTY1RjZcdTUwMTlcdTkwNDdcdTUyMzAgdml0ZXByZXNzIFx1NzY4NFx1NjJBNVx1OTUxOVx1RkYxQVt2aXRlcHJlc3NdIHNwYXduIEVCQURGXHUzMDAyXHJcbiAgICogXHU3RUNGXHU4RkM3XHU2MzkyXHU2N0U1XHU2NjJGXHU1NkUwXHU0RTNBIHZpdGVwcmVzcyBcdTUxODVcdTkwRThcdTRGN0ZcdTc1MjhcdTc2ODQgZ2l0LWxvZyBcdTU0N0RcdTRFRTRcdTU3MjhcdTU5MDRcdTc0MDZcdTU5MjdcdTkxQ0ZcdTY1ODdcdTRFRjZcdTY1RjZcdTRGMUFcdTU5MzFcdThEMjVcdUZGMDhcdTYwMDBcdTc1OTFcdTY2MkZcdTU0N0RcdTRFRTRcdTg4NENcdTUzQzJcdTY1NzBcdThGQzdcdTk1N0ZcdTVCRkNcdTgxRjRcdUZGMDlcdUZGMENcdTYyNDBcdTRFRTVcdTUzRUFcdTgwRkRcdTY1M0VcdTVGMDNcdTUxODVcdTdGNkVcdTc2ODQgbGFzdFVwZGF0ZWQgXHU1MjlGXHU4MEZEXHVGRjBDXHU2NTM5XHU0RTNBXHU2MjRCXHU1MkE4XHU3RUY0XHU2MkE0XHUzMDAyXHJcbiAgICogKi9cclxuICBsYXN0VXBkYXRlZDogZmFsc2UsXHJcbiAgbWFya2Rvd246IG1hcmtkb3duKCksXHJcbiAgcm91dGVyOiB7XHJcbiAgICBwcmVmZXRjaExpbmtzOiBmYWxzZSxcclxuICB9LFxyXG4gIHNpdGVtYXA6IHtcclxuICAgIGhvc3RuYW1lOiBnaXRodWJfcGFnZV91cmwsXHJcbiAgICBsYXN0bW9kRGF0ZU9ubHk6IGZhbHNlLFxyXG4gIH0sXHJcbiAgLy8gaHR0cHM6Ly92aXRlcHJlc3MuZGV2L3JlZmVyZW5jZS9kZWZhdWx0LXRoZW1lLWNvbmZpZ1xyXG4gIHRoZW1lQ29uZmlnOiB0aGVtZUNvbmZpZygpLFxyXG4gIHRpdGxlOiByZXBvTmFtZSxcclxuICBzcmNFeGNsdWRlOiBJR05PUkVfTElTVCxcclxuICB2aXRlOiB7XHJcbiAgICBzZXJ2ZXI6IHtcclxuICAgICAgd2F0Y2g6IHtcclxuICAgICAgICBpZ25vcmVkOiBJR05PUkVfTElTVCxcclxuICAgICAgICAvLyBhd2FpdFdyaXRlRmluaXNoOiB7XHJcbiAgICAgICAgLy8gICBzdGFiaWxpdHlUaHJlc2hvbGQ6IDUwMDAsIC8vIFx1NjU4N1x1NEVGNlx1NTkyN1x1NUMwRlx1N0EzM1x1NUI5QSAxMDAwbXMgXHU1NDBFXHU4OUU2XHU1M0QxXHJcbiAgICAgICAgLy8gICBwb2xsSW50ZXJ2YWw6IDEwMDAsIC8vIFx1NkJDRiAxMDBtcyBcdTY4QzBcdTY3RTVcdTRFMDBcdTZCMjFcdTY1ODdcdTRFRjZcdTU5MjdcdTVDMEZcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC8vIHVzZVBvbGxpbmc6IHRydWUsIC8vIFx1NTQyRlx1NzUyOFx1OEY2RVx1OEJFMlx1NjczQVx1NTIzNlx1RkYwOFx1NjZGNFx1N0EzM1x1NUI5QVx1NEY0Nlx1N0EwRFx1ODAxN1x1OEQ0NFx1NkU5MFx1RkYwOSBcdTg5RTNcdTUxQjMgV1NML21hY09TIFx1NUUzOFx1ODlDMVx1NzZEMVx1NTQyQ1x1OTVFRVx1OTg5OFxyXG4gICAgICB9LFxyXG4gICAgICAvLyBcdTkwN0ZcdTUxNERcdTUxODVcdTVCNThcdTZFQTJcdTUxRkFcdUZGMDhcdTU5MjdcdTU3OEJcdTY1ODdcdTY4NjNcdTVFOTNcdTVGQzVcdTU5MDdcdUZGMDlcclxuICAgICAgLy8gd2FybXVwOiB7XHJcbiAgICAgIC8vICAgY2xpZW50RmlsZXM6IFsnLi8qKi8qLm1kJ10sXHJcbiAgICAgIC8vIH0sXHJcbiAgICB9LFxyXG4gICAgcGx1Z2luczogW1ROX0hNUl9QbHVnaW4oKV0sXHJcbiAgfSxcclxufSlcclxuXHJcbmZ1bmN0aW9uIGhlYWQoKSB7XHJcbiAgY29uc3QgaGVhZDogSGVhZENvbmZpZ1tdID0gW1xyXG4gICAgW1xyXG4gICAgICAnbWV0YScsXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiAna2V5d29yZHMnLFxyXG4gICAgICAgIGNvbnRlbnQ6IGtleXdvcmRzLmpvaW4oJywgJyksXHJcbiAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgWydtZXRhJywgeyBuYW1lOiAnYXV0aG9yJywgY29udGVudDogYXV0aG9yIH1dLFxyXG4gICAgWydsaW5rJywgeyByZWw6ICdjYW5vbmljYWwnLCBocmVmOiBnaXRodWJfcGFnZV91cmwgfV0sXHJcbiAgICBbJ2xpbmsnLCB7IHJlbDogJ2ljb24nLCBocmVmOiBnaXRodWJfcGFnZV91cmwgKyAnZmF2aWNvbi5pY28nIH1dLFxyXG4gICAgWydsaW5rJywgeyByZWw6ICdwcmVjb25uZWN0JywgaHJlZjogJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20nIH1dLFxyXG4gIF1cclxuXHJcbiAgcmV0dXJuIGhlYWRcclxufVxyXG5cclxuLy8gXHU3QjgwXHU1MzE2XHU3Njg0IE1lcm1haWQgXHU1OTA0XHU3NDA2XHU1MUZEXHU2NTcwXHJcbmNvbnN0IHNpbXBsZU1lcm1haWRNYXJrZG93biA9IChtZDogTWFya2Rvd25JdCkgPT4ge1xyXG4gIGNvbnN0IGZlbmNlID0gbWQucmVuZGVyZXIucnVsZXMuZmVuY2VcclxuICAgID8gbWQucmVuZGVyZXIucnVsZXMuZmVuY2UuYmluZChtZC5yZW5kZXJlci5ydWxlcylcclxuICAgIDogKCkgPT4gJydcclxuXHJcbiAgbWQucmVuZGVyZXIucnVsZXMuZmVuY2UgPSAodG9rZW5zLCBpbmRleCwgb3B0aW9ucywgZW52LCBzbGYpID0+IHtcclxuICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW2luZGV4XVxyXG5cclxuICAgIC8vIFx1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NEUzQSBtZXJtYWlkIFx1NEVFM1x1NzgwMVx1NTc1N1xyXG4gICAgaWYgKHRva2VuLmluZm8udHJpbSgpID09PSAnbWVybWFpZCcpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBrZXkgPSBgbWVybWFpZC0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKVxyXG4gICAgICAgICAgLnRvU3RyaW5nKDM2KVxyXG4gICAgICAgICAgLnN1YnN0cigyLCA5KX1gXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRva2VuLmNvbnRlbnRcclxuICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTgxRUFcdTVCOUFcdTRFNDlcdTdFQzRcdTRFRjZcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcclxuICAgICAgICAvLyAgICdtZXJtYWlkJyxcclxuICAgICAgICAvLyAgIGA8TWVybWFpZCBpZD1cIiR7a2V5fVwiIGdyYXBoPVwiJHtlbmNvZGVVUklDb21wb25lbnQoY29udGVudCl9XCIgLz5gXHJcbiAgICAgICAgLy8gKVxyXG4gICAgICAgIHJldHVybiBgPE1lcm1haWQgaWQ9XCIke2tleX1cIiBncmFwaD1cIiR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpfVwiIC8+YFxyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gYDxwcmU+JHtlcnJ9PC9wcmU+YFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU1MTQxXHU4QkI4XHU0RjdGXHU3NTI4IG1tZCBcdTY4MDdcdThCQjBcdTY2M0VcdTc5M0EgTWVybWFpZCBcdTRFRTNcdTc4MDFcdTY3MkNcdThFQUJcclxuICAgIGlmICh0b2tlbi5pbmZvLnRyaW0oKSA9PT0gJ21tZCcpIHtcclxuICAgICAgdG9rZW5zW2luZGV4XS5pbmZvID0gJ21lcm1haWQnXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZlbmNlKHRva2VucywgaW5kZXgsIG9wdGlvbnMsIGVudiwgc2xmKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbWFya2Rvd24oKSB7XHJcbiAgY29uc3QgbWFya2Rvd246IE1hcmtkb3duT3B0aW9ucyA9IHtcclxuICAgIGxpbmVOdW1iZXJzOiB0cnVlLFxyXG4gICAgbWF0aDogdHJ1ZSxcclxuICAgIGNvbmZpZyhtZCkge1xyXG4gICAgICAvLyBcdTZERkJcdTUyQTBcdTUyNERcdTdGNkVcdTg5QzRcdTUyMTlcdTRGRERcdTVCNThcdTUzOUZcdTU5Q0JcdTUxODVcdTVCQjlcclxuICAgICAgbWQuY29yZS5ydWxlci5iZWZvcmUoJ25vcm1hbGl6ZScsICdzYXZlLXNvdXJjZScsIChzdGF0ZSkgPT4ge1xyXG4gICAgICAgIHN0YXRlLmVudi5zb3VyY2UgPSBzdGF0ZS5zcmNcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgLy8gXHU2REZCXHU1MkEwIE1lcm1haWQgXHU2NTJGXHU2MzAxXHJcbiAgICAgIHNpbXBsZU1lcm1haWRNYXJrZG93bihtZClcclxuXHJcbiAgICAgIC8vIFx1NTE0OFx1NEZERFx1NzU1OSBjb250YWluZXIgXHU3Njg0XHU4OUUzXHU2NzkwXHVGRjA4XHU4RDFGXHU4RDIzXHU2MjhBIGBgYG1hcmttYXAgYGBgIFx1OEJDNlx1NTIyQlx1NjIxMCBjb250YWluZXIgdG9rZW5zXHVGRjA5XHJcbiAgICAgIC8vIFx1NEY0Nlx1OEJBOVx1NUI4M1x1NjcyQ1x1OEVBQlx1NEUwRFx1OEY5M1x1NTFGQVx1NEVGQlx1NEY1NSBIVE1MXHVGRjA4cmVuZGVyIFx1OEZENFx1NTZERVx1N0E3QVx1RkYwOVxyXG4gICAgICBtZC51c2UobWFya2Rvd25JdENvbnRhaW5lciwgJ21hcmttYXAnLCB7XHJcbiAgICAgICAgbWFya2VyOiAnYCcsXHJcbiAgICAgICAgdmFsaWRhdGUocGFyYW1zKSB7XHJcbiAgICAgICAgICAvLyBcdTYzQTVcdTUzRDcgXCJtYXJrbWFwXCIsIFwibWFya21hcHsuLi59XCIgXHU2MjE2IFwibWFya21hcCBrZXk9dmFsIC4uLlwiIFx1N0I0OVx1NTE5OVx1NkNENVxyXG4gICAgICAgICAgY29uc3QgcCA9IChwYXJhbXMgfHwgJycpLnRyaW0oKVxyXG4gICAgICAgICAgcmV0dXJuIHAuc3RhcnRzV2l0aCgnbWFya21hcCcpXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICByZXR1cm4gJydcclxuICAgICAgICB9LFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgLy8gXHU1NzI4IGNvcmUgXHU5NjM2XHU2QkI1XHU2MjhBXHU2NTc0XHU0RTJBIGNvbnRhaW5lciBcdTUzM0FcdTk1RjRcdTY2RkZcdTYzNjJcdTYyMTBcdTRFMDBcdTRFMkEgaHRtbF9ibG9ja1x1RkYwOE1hcmtNYXAgXHU3RUM0XHU0RUY2XHU2ODA3XHU3QjdFXHVGRjA5XHJcbiAgICAgIC8vIFx1OEZEOVx1NjgzN1x1NkUzMlx1NjdEM1x1NjVGNlx1NUMzMVx1NTNFQVx1OEY5M1x1NTFGQSA8TWFya01hcCAuLi4+XHVGRjBDXHU0RTJEXHU5NUY0XHU3Njg0XHU1MjE3XHU4ODY4IHRva2VuIFx1NURGMlx1ODhBQlx1NzlGQlx1OTY2NFxyXG4gICAgICBtZC5jb3JlLnJ1bGVyLmFmdGVyKCdibG9jaycsICd0bl9yZXBsYWNlX21hcmttYXBfY29udGFpbmVyJywgKHN0YXRlKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3JjID0gc3RhdGUuZW52LnNvdXJjZSB8fCAnJ1xyXG4gICAgICAgIGNvbnN0IGxpbmVzID0gc3JjLnNwbGl0KCdcXG4nKVxyXG4gICAgICAgIGNvbnN0IHRva2VucyA9IHN0YXRlLnRva2Vuc1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgY29uc3QgdCA9IHRva2Vuc1tpXVxyXG4gICAgICAgICAgaWYgKHQudHlwZSA9PT0gJ2NvbnRhaW5lcl9tYXJrbWFwX29wZW4nKSB7XHJcbiAgICAgICAgICAgIC8vIFx1NjI3RVx1NTIzMFx1NUJGOVx1NUU5NFx1NzY4NCBjbG9zZSB0b2tlblxyXG4gICAgICAgICAgICBsZXQgaiA9IGkgKyAxXHJcbiAgICAgICAgICAgIHdoaWxlIChcclxuICAgICAgICAgICAgICBqIDwgdG9rZW5zLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAgIHRva2Vuc1tqXS50eXBlICE9PSAnY29udGFpbmVyX21hcmttYXBfY2xvc2UnXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICBqKytcclxuICAgICAgICAgICAgaWYgKGogPj0gdG9rZW5zLmxlbmd0aCkgY29udGludWUgLy8gc2FmZXR5XHJcblxyXG4gICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjggdG9rZW4ubWFwIFx1NjNEMFx1NTNENlx1NkU5MFx1NjU4N1x1NEVGNlx1NUJGOVx1NUU5NFx1ODg0Q1x1RkYwOG9wZW4udG9rZW4ubWFwIFx1NUI1OFx1Nzc0MCBjb250YWluZXIgXHU4RDc3XHU2QjYyXHU4ODRDXHVGRjA5XHJcbiAgICAgICAgICAgIGNvbnN0IG9wZW4gPSB0XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0TGluZSA9IG9wZW4ubWFwID8gb3Blbi5tYXBbMF0gKyAxIDogbnVsbFxyXG4gICAgICAgICAgICBjb25zdCBlbmRMaW5lID0gb3Blbi5tYXAgPyBvcGVuLm1hcFsxXSAtIDEgOiBudWxsXHJcblxyXG4gICAgICAgICAgICAvLyAxKSBcdTRFQ0VcdTVGMDBcdTU5MzQgZmVuY2UgXHU4ODRDXHU4OUUzXHU2NzkwXHU1M0MyXHU2NTcwXHVGRjA4XHU2NTJGXHU2MzAxIGB7YT0xIGI9XCJ4XCJ9YFx1MzAwMWBhPTEgYj1cInhcImBcdUZGMENcdTVFNzZcdTY1MkZcdTYzMDFcdTUzNTVcdTRFMkFcdTY1NzBcdTVCNTcgc2hvcnRoYW5kXHVGRjA5XHJcbiAgICAgICAgICAgIGxldCBwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55OyBpbml0aWFsRXhwYW5kTGV2ZWw/OiBudW1iZXIgfSA9IHt9XHJcblxyXG4gICAgICAgICAgICBpZiAob3Blbi5tYXAgJiYgdHlwZW9mIG9wZW4ubWFwWzBdID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IG9wZW5MaW5lID0gKGxpbmVzW29wZW4ubWFwWzBdXSB8fCAnJykudHJpbSgpXHJcbiAgICAgICAgICAgICAgbGV0IHBhcmFtUGFydCA9ICcnXHJcblxyXG4gICAgICAgICAgICAgIC8vIFx1NEYxOFx1NTE0OFx1NTMzOVx1OTE0RFx1NTkyN1x1NjJFQ1x1NTNGN1x1NUY2Mlx1NUYwRiBgYGBtYXJrbWFwey4uLn1cclxuICAgICAgICAgICAgICBjb25zdCBicmFjZU1hdGNoID0gb3BlbkxpbmUubWF0Y2goL1xceyhbXn1dKilcXH0vKVxyXG4gICAgICAgICAgICAgIGlmIChicmFjZU1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbVBhcnQgPSBicmFjZU1hdGNoWzFdLnRyaW0oKVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTU0MjZcdTUyMTlcdTVDMURcdThCRDVcdTUzQkJcdTYzODlcdTUyNERcdTdGMDAgYGBgIFx1NTQ4QyBtYXJrbWFwXHVGRjBDXHU1MjY5XHU0RTBCXHU3Njg0XHU0RjVDXHU0RTNBXHU1M0MyXHU2NTcwXHU5MEU4XHU1MjA2XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhZnRlciA9IG9wZW5MaW5lLnJlcGxhY2UoL15gK1xccyovLCAnJylcclxuICAgICAgICAgICAgICAgIGlmIChhZnRlci5zdGFydHNXaXRoKCdtYXJrbWFwJykpIHtcclxuICAgICAgICAgICAgICAgICAgcGFyYW1QYXJ0ID0gYWZ0ZXIuc2xpY2UoJ21hcmttYXAnLmxlbmd0aCkudHJpbSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAocGFyYW1QYXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTZCNjNcdTUyMTlcdTYzMDkgdG9rZW4gXHU1MjA3XHU1MjA2XHVGRjFBXHU0RkREXHU2MzAxXHU3NTI4XHU1RjE1XHU1M0Y3XHU1MzA1XHU4OEY5XHU3Njg0XHU3MjQ3XHU2QkI1XHU0RTNBXHU1MzU1XHU0RTJBIHRva2VuXHVGRjA4XHU2NTJGXHU2MzAxXHU1MzA1XHU1NDJCXHU3QTdBXHU2ODNDXHVGRjA5XHJcbiAgICAgICAgICAgICAgICAvLyBcdTRGOEJcdTU5ODI6IHRva2VuQXJyIC0+IFsnMicsICd0aXRsZT1cIlx1NjIxMVx1NzY4NCBcdTY4MTFcIicsICdmb289YmFyJ11cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuQXJyID0gcGFyYW1QYXJ0Lm1hdGNoKC9cIlteXCJdKlwifCdbXiddKid8XFxTKy9nKSB8fCBbXVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1N0IyQ1x1NEUwMFx1NEUyQSB0b2tlbiBcdTY2MkZcdTdFQUZcdTY1NzBcdTVCNTdcdUZGMENcdTYyOEFcdTVCODNcdTVGNTNcdTRGNUMgaW5pdGlhbEV4cGFuZExldmVsXHJcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRJZHggPSAwXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgIHRva2VuQXJyLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgL15cXGQrJC8udGVzdCh0b2tlbkFyclswXSBhcyBzdHJpbmcpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgcGFyYW1zLmluaXRpYWxFeHBhbmRMZXZlbCA9IE51bWJlcih0b2tlbkFyclswXSlcclxuICAgICAgICAgICAgICAgICAgc3RhcnRJZHggPSAxXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gXHU4OUUzXHU2NzkwXHU1MjY5XHU0RjU5IHRva2VuIFx1NEUzQSBrZXk9dmFsdWVcdUZGMDhcdTY1MkZcdTYzMDEga2V5PXZhbCBcdTYyMTYga2V5OnZhbFx1RkYwOVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IHN0YXJ0SWR4OyBrIDwgdG9rZW5BcnIubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgcGFpciA9IHRva2VuQXJyW2tdXHJcbiAgICAgICAgICAgICAgICAgIGlmICghcGFpcikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgY29uc3QgbSA9IHBhaXIubWF0Y2goL14oW149Olxcc10rKVxccyooPXw6KVxccyooLispJC8pXHJcbiAgICAgICAgICAgICAgICAgIGlmIChtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gbVsxXVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSBtWzNdXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTNCQlx1OTY2NFx1NTkxNlx1NUM0Mlx1NUYxNVx1NTNGN1x1RkYwOFx1ODJFNVx1NUI1OFx1NTcyOFx1RkYwOVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICgvXlwiLipcIiQvLnRlc3QodmFsKSAmJiB2YWwubGVuZ3RoID49IDIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAoL14nLionJC8udGVzdCh2YWwpICYmIHZhbC5sZW5ndGggPj0gMilcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbC5zbGljZSgxLCAtMSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eXFxkKyQvLnRlc3QodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gXHU3RUFGXHU2NTcwXHU1QjU3XHU4RjZDXHU1QjU3XHU3QjI2XHU0RTMyXHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBTdHJpbmcoTnVtYmVyKHZhbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXNba2V5XSA9IHZhbFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyAyKSBcdTYzRDBcdTUzRDZcdTUxODVcdTVCQjlcdUZGMDhcdTY1MkZcdTYzMDFcdTY1ODdcdTRFRjZcdTVGMTVcdTc1MjhcdThCRURcdTZDRDUgYDw8PCAuL3BhdGgvdG8vZmlsZS5tZGBcdUZGMDlcclxuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSAnJ1xyXG4gICAgICAgICAgICBpZiAoc3RhcnRMaW5lICE9PSBudWxsICYmIGVuZExpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICBmb3IgKGxldCBrID0gc3RhcnRMaW5lOyBrIDw9IGVuZExpbmUgJiYgayA8IGxpbmVzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9IGxpbmVzW2tdICsgJ1xcbidcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gXHU1NkRFXHU5MDAwXHVGRjFBXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5IG1hcCBcdTRGRTFcdTYwNkZcdUZGMENcdTVDMURcdThCRDVcdTc1MjhcdTRFMkRcdTk1RjQgdG9rZW5zIFx1NjJGQ1x1NjNBNVx1NjU4N1x1NjcyQ1xyXG4gICAgICAgICAgICAgIGZvciAobGV0IGsgPSBpICsgMTsgayA8IGo7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSB0b2tlbnNba10uY29udGVudCB8fCAnJ1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gLS0tIFx1NjhDMFx1NjdFNVx1N0IyQ1x1NEUwMFx1OTc1RVx1N0E3QVx1ODg0Q1x1NjYyRlx1NTQyNlx1NEUzQVx1NUYxNVx1NzUyOFx1OEJFRFx1NkNENSAtLS1cclxuICAgICAgICAgICAgY29uc3QgZmlyc3ROb25FbXB0eUxpbmUgPVxyXG4gICAgICAgICAgICAgIChjb250ZW50IHx8ICcnKS5zcGxpdCgnXFxuJykuZmluZCgobG4pID0+IGxuLnRyaW0oKSAhPT0gJycpIHx8ICcnXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZk1hdGNoID0gZmlyc3ROb25FbXB0eUxpbmUudHJpbSgpLm1hdGNoKC9ePDw8XFxzKiguKykkLylcclxuICAgICAgICAgICAgaWYgKHJlZk1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgLy8gXHU2M0QwXHU1M0Q2XHU1RjE1XHU3NTI4XHU4REVGXHU1Rjg0XHVGRjBDXHU2NTJGXHU2MzAxXHU1RjE1XHU1M0Y3XHU1MzA1XHU4OEY5XHJcbiAgICAgICAgICAgICAgbGV0IHJlZlJhdyA9IHJlZk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKC9eWydcIl18WydcIl0kL2csICcnKVxyXG5cclxuICAgICAgICAgICAgICAvLyBcdTVDMURcdThCRDVcdTU0MENcdTZCNjVcdThCRkJcdTUzRDZcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcdUZGMDhcdTUxN0NcdTVCQjlcdTVFMzhcdTg5QzEgTm9kZSBcdTczQUZcdTU4ODNcdUZGMDlcclxuICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1QzFEXHU4QkQ1XHU2ODM5XHU2MzZFXHU1RjUzXHU1MjREIG1hcmtkb3duIFx1NjU4N1x1NEVGNlx1NEY0RFx1N0Y2RVx1ODlFM1x1Njc5MFx1NzZGOFx1NUJGOVx1OERFRlx1NUY4NFxyXG4gICAgICAgICAgICAgICAgY29uc3QgZW52ID0gc3RhdGUuZW52IHx8IHt9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZVJlbCA9XHJcbiAgICAgICAgICAgICAgICAgIGVudi5yZWxhdGl2ZVBhdGggfHwgZW52LnBhdGggfHwgZW52LmZpbGVQYXRoIHx8IGVudi5maWxlIHx8ICcnXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVmRnVsbFBhdGggPSByZWZSYXdcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXBhdGguaXNBYnNvbHV0ZShyZWZSYXcpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChwb3NzaWJsZVJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NUMwNiByZWxhdGl2ZVBhdGggXHU4OUM2XHU0RjVDXHU3NkY4XHU1QkY5XHU0RThFXHU5ODc5XHU3NkVFXHU2ODM5XHU3Njg0XHU4REVGXHU1Rjg0XHVGRjA4XHU0RjhCXHU1OTgyICdub3Rlcy9mb28vYmFyLm1kJ1x1RkYwOVx1RkYwQ1x1NTNENlx1NTE3Nlx1NzZFRVx1NUY1NVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREaXIgPSBwYXRoLmRpcm5hbWUocG9zc2libGVSZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU4OUUzXHU2NzkwXHU1MjMwIHByb2Nlc3MuY3dkKClcclxuICAgICAgICAgICAgICAgICAgICByZWZGdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShcclxuICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuY3dkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGlyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVmUmF3XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NkNBMVx1NjcwOVx1NzZGOFx1NUJGOVx1NjU4N1x1NEVGNlx1NEZFMVx1NjA2Rlx1RkYwQ1x1NTIxOVx1NzZGOFx1NUJGOVx1NEU4RVx1OTg3OVx1NzZFRVx1NjgzOVx1ODlFM1x1Njc5MFxyXG4gICAgICAgICAgICAgICAgICAgIHJlZkZ1bGxQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIHJlZlJhdylcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgLy8gXHU3RUREXHU1QkY5XHU4REVGXHU1Rjg0XHU3NkY0XHU2M0E1XHU0RjdGXHU3NTI4XHVGRjA4XHU2MzA5XHU3Q0ZCXHU3RURGXHU4REVGXHU1Rjg0XHVGRjA5XHJcbiAgICAgICAgICAgICAgICAgIHJlZkZ1bGxQYXRoID0gcmVmUmF3XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2NTg3XHU0RUY2XHU2MjY5XHU1QzU1XHU1NDBEXHU3RjNBXHU1OTMxXHU0RTE0XHU2MzA3XHU1QjlBXHU3Njg0XHU2NjJGXHU3NkVFXHU1RjU1XHU2MjE2XHU2NUUwXHU2MjY5XHU1QzU1XHU1NDBEXHVGRjBDXHU1MTQxXHU4QkI4XHU2MzA5XHU1MzlGXHU2ODM3XHU4QkZCXHU1M0Q2XHVGRjA4XHU3NTI4XHU2MjM3XHU1M0VGXHU1NzI4XHU1RjE1XHU3NTI4XHU0RTJEXHU2MzA3XHU1QjlBIC5tZFx1RkYwOVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZkZ1bGxQYXRoOicsIHJlZkZ1bGxQYXRoKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMocmVmRnVsbFBhdGgsICd1dGYtOCcpXHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gZmlsZUNvbnRlbnRcclxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1OEJGQlx1NTNENlx1NTkzMVx1OEQyNVx1RkYxQVx1NUMwNlx1OTUxOVx1OEJFRlx1NTE5OVx1NTE2NSBjb250ZW50IFx1NEVFNVx1NEZCRlx1NjM5Mlx1NjdFNVx1RkYwOFx1NEUwRFx1NEYxQVx1OEJBOVx1NkQ0MVx1N0EwQlx1NzZGNFx1NjNBNVx1NUQyOVx1NkU4M1x1RkYwOVxyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGBGYWlsZWQgdG8gbG9hZCByZWZlcmVuY2VkIGZpbGU6ICR7ZXNjKFxyXG4gICAgICAgICAgICAgICAgICBTdHJpbmcocmVmUmF3KVxyXG4gICAgICAgICAgICAgICAgKX1cXG5cXG5FcnJvcjogJHtlc2MoXHJcbiAgICAgICAgICAgICAgICAgIFN0cmluZyhlcnIgJiYgZXJyLm1lc3NhZ2UgPyBlcnIubWVzc2FnZSA6IGVycilcclxuICAgICAgICAgICAgICAgICl9YFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gMykgXHU2Nzg0XHU5MDIwXHU3RUM0XHU0RUY2XHU2ODA3XHU3QjdFXHU1RTc2XHU2MjhBXHU1M0MyXHU2NTcwXHU2Q0U4XHU1MTY1XHU0RTNBIHByb3BzXHVGRjA4XHU0RTBFXHU1MzlGXHU1QjlFXHU3M0IwXHU0RTAwXHU4MUY0XHVGRjA5XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRDb250ZW50ID0gZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQudHJpbSgpKVxyXG4gICAgICAgICAgICBsZXQgcHJvcHNTdHIgPSBgY29udGVudD1cIiR7ZW5jb2RlZENvbnRlbnR9XCJgXHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJyB8fCAvXlxcZCskLy50ZXN0KFN0cmluZyh2KSkpIHtcclxuICAgICAgICAgICAgICAgIHByb3BzU3RyICs9IGAgOiR7a309XCIke3Z9XCJgXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNhZmUgPSBTdHJpbmcodikucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXHJcbiAgICAgICAgICAgICAgICBwcm9wc1N0ciArPSBgICR7a309XCIke3NhZmV9XCJgXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBodG1sID0gYDxNYXJrTWFwICR7cHJvcHNTdHJ9PjwvTWFya01hcD5cXG5gXHJcblxyXG4gICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkEgaHRtbF9ibG9jayB0b2tlblx1RkYwOFx1NTE3Q1x1NUJCOVx1NEUwRFx1NTQwQ1x1OEZEMFx1ODg0Q1x1NzNBRlx1NTg4M1x1RkYxQVx1NEYxOFx1NTE0OFx1NEY3Rlx1NzUyOCBzdGF0ZS5Ub2tlbiBcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTUyMTlcdTc1MjggcGxhaW4gb2JqZWN0XHVGRjA5XHJcbiAgICAgICAgICAgIGxldCBodG1sVG9rZW5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS5Ub2tlbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgIGh0bWxUb2tlbiA9IG5ldyBzdGF0ZS5Ub2tlbignaHRtbF9ibG9jaycsICcnLCAwKVxyXG4gICAgICAgICAgICAgIGh0bWxUb2tlbi5jb250ZW50ID0gaHRtbFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGh0bWxUb2tlbiA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdodG1sX2Jsb2NrJyxcclxuICAgICAgICAgICAgICAgIHRhZzogJycsXHJcbiAgICAgICAgICAgICAgICBhdHRyczogbnVsbCxcclxuICAgICAgICAgICAgICAgIG1hcDogbnVsbCxcclxuICAgICAgICAgICAgICAgIG5lc3Rpbmc6IDAsXHJcbiAgICAgICAgICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogaHRtbCxcclxuICAgICAgICAgICAgICAgIGJsb2NrOiB0cnVlLFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU3NTI4XHU1MzU1XHU0RTJBIGh0bWxfdG9rZW4gXHU2NkZGXHU2MzYyIG9wZW4uLmNsb3NlIFx1NTMzQVx1OTVGNFxyXG4gICAgICAgICAgICB0b2tlbnMuc3BsaWNlKGksIGogLSBpICsgMSwgaHRtbFRva2VuKVxyXG4gICAgICAgICAgICAvLyBpIFx1NEY0RFx1N0Y2RVx1NzNCMFx1NTcyOFx1NjYyRlx1NjZGRlx1NjM2Mlx1NTQwRVx1NzY4NCBodG1sX3Rva2VuXHVGRjBDXHU3RUU3XHU3RUVEXHU1RkFBXHU3M0FGXHU1MzczXHU1M0VGXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgbWQudXNlKG1hcmtkb3duSXRUYXNrTGlzdHMpXHJcblxyXG4gICAgICBtZC51c2UobWlsYSwge1xyXG4gICAgICAgIGF0dHJzOiB7XHJcbiAgICAgICAgICB0YXJnZXQ6ICdfc2VsZicsXHJcbiAgICAgICAgICByZWw6ICdub29wZW5lcicsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGVzYyhzID0gJycpIHtcclxuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKFxyXG4gICAgICAgICAgL1smPD5cIiddL2csXHJcbiAgICAgICAgICAoY2gpID0+XHJcbiAgICAgICAgICAgICh7XHJcbiAgICAgICAgICAgICAgJyYnOiAnJmFtcDsnLFxyXG4gICAgICAgICAgICAgICc8JzogJyZsdDsnLFxyXG4gICAgICAgICAgICAgICc+JzogJyZndDsnLFxyXG4gICAgICAgICAgICAgICdcIic6ICcmcXVvdDsnLFxyXG4gICAgICAgICAgICAgIFwiJ1wiOiAnJiMzOTsnLFxyXG4gICAgICAgICAgICB9W2NoXSEpXHJcbiAgICAgICAgKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgX190bl9zd2lwZXJfdWlkID0gMFxyXG5cclxuICAgICAgaW50ZXJmYWNlIFROX1JVTEVTX1NUQUNLX0lURU0ge1xyXG4gICAgICAgIGltYWdlOiBhbnlcclxuICAgICAgICBwT3BlbjogYW55XHJcbiAgICAgICAgcENsb3NlOiBhbnlcclxuICAgICAgfVxyXG4gICAgICBsZXQgX190bl9ydWxlc19zdGFjazogQXJyYXk8VE5fUlVMRVNfU1RBQ0tfSVRFTT4gPSBbXVxyXG5cclxuICAgICAgLy8gXHU2QkNGXHU0RTJBXHU2NTg3XHU2ODYzXHU2RTMyXHU2N0QzXHU1MjREXHU5MUNEXHU3RjZFXHU4QkExXHU2NTcwXHU1NjY4XHJcbiAgICAgIG1kLmNvcmUucnVsZXIuYmVmb3JlKCdibG9jaycsICd0bl9zd2lwZXJfcmVzZXRfdWlkJywgKCkgPT4ge1xyXG4gICAgICAgIF9fdG5fc3dpcGVyX3VpZCA9IDBcclxuICAgICAgICBfX3RuX3J1bGVzX3N0YWNrID0gW11cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgbWQudXNlKG1hcmtkb3duSXRDb250YWluZXIsICdzd2lwZXInLCB7XHJcbiAgICAgICAgcmVuZGVyOiAodG9rZW5zLCBpZHgpID0+IHtcclxuICAgICAgICAgIGlmICh0b2tlbnNbaWR4XS5uZXN0aW5nID09PSAxKSB7XHJcbiAgICAgICAgICAgIC8vIFx1OEZEQlx1NUJCOVx1NTY2OFx1RkYxQVx1NEZERFx1NUI1OFx1NTM5Rlx1ODlDNFx1NTIxOSAmIFx1NUM0MFx1OTBFOFx1ODk4Nlx1NzZENlxyXG4gICAgICAgICAgICBfX3RuX3J1bGVzX3N0YWNrLnB1c2goe1xyXG4gICAgICAgICAgICAgIGltYWdlOiBtZC5yZW5kZXJlci5ydWxlcy5pbWFnZSxcclxuICAgICAgICAgICAgICBwT3BlbjogbWQucmVuZGVyZXIucnVsZXMucGFyYWdyYXBoX29wZW4sXHJcbiAgICAgICAgICAgICAgcENsb3NlOiBtZC5yZW5kZXJlci5ydWxlcy5wYXJhZ3JhcGhfY2xvc2UsXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBtZC5yZW5kZXJlci5ydWxlcy5wYXJhZ3JhcGhfb3BlbiA9ICgpID0+ICcnXHJcbiAgICAgICAgICAgIG1kLnJlbmRlcmVyLnJ1bGVzLnBhcmFncmFwaF9jbG9zZSA9ICgpID0+ICcnXHJcbiAgICAgICAgICAgIG1kLnJlbmRlcmVyLnJ1bGVzLmltYWdlID0gKHRva2VucywgaSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHRva2VuOiBhbnkgPSB0b2tlbnNbaV1cclxuICAgICAgICAgICAgICBjb25zdCBzcmMgPSB0b2tlbi5hdHRyR2V0KCdzcmMnKSB8fCAnJ1xyXG4gICAgICAgICAgICAgIGNvbnN0IGFsdCA9IHRva2VuLmNvbnRlbnQgfHwgJydcclxuICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGFsdCAmJiBhbHQudHJpbSgpID8gYWx0IDogJ2ltZydcclxuICAgICAgICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGVcIiBkYXRhLXRpdGxlPVwiJHtlc2MoXHJcbiAgICAgICAgICAgICAgICB0aXRsZVxyXG4gICAgICAgICAgICAgICl9XCI+PGltZyBzcmM9XCIke2VzYyhzcmMpfVwiIGFsdD1cIiR7ZXNjKGFsdCl9XCI+PC9kaXY+YFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpZCA9IGB0bi1zd2lwZXItJHsrK19fdG5fc3dpcGVyX3VpZH1gXHJcbiAgICAgICAgICAgIHJldHVybiBgXHJcbjxkaXYgY2xhc3M9XCJ0bi1zd2lwZXJcIiBkYXRhLXN3aXBlci1pZD1cIiR7aWR9XCI+XHJcbiAgPGRpdiBjbGFzcz1cInRuLXN3aXBlci10YWJzXCI+PC9kaXY+XHJcbiAgPGRpdiBjbGFzcz1cInN3aXBlci1jb250YWluZXJcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJzd2lwZXItd3JhcHBlclwiPlxyXG5gXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBcdTUxRkFcdTVCQjlcdTU2NjhcdUZGMUFcdTYwNjJcdTU5MERcdTUzOUZcdTg5QzRcdTUyMTlcdTVFNzZcdTY1MzZcdTVDM0VcclxuICAgICAgICAgICAgY29uc3QgcHJldjogVE5fUlVMRVNfU1RBQ0tfSVRFTSA9IF9fdG5fcnVsZXNfc3RhY2sucG9wKCkgfHwge1xyXG4gICAgICAgICAgICAgIGltYWdlOiBudWxsLFxyXG4gICAgICAgICAgICAgIHBPcGVuOiBudWxsLFxyXG4gICAgICAgICAgICAgIHBDbG9zZTogbnVsbCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZC5yZW5kZXJlci5ydWxlcy5pbWFnZSA9IHByZXYuaW1hZ2VcclxuICAgICAgICAgICAgbWQucmVuZGVyZXIucnVsZXMucGFyYWdyYXBoX29wZW4gPSBwcmV2LnBPcGVuXHJcbiAgICAgICAgICAgIG1kLnJlbmRlcmVyLnJ1bGVzLnBhcmFncmFwaF9jbG9zZSA9IHByZXYucENsb3NlXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYFxyXG4gICAgPC9kaXY+XHJcbiAgICA8IS0tIFx1NEUwQlx1NEUwMFx1OTg3NVx1NjMwOVx1OTRBRSAtLT5cclxuICAgIDwhLS0gPGRpdiBjbGFzcz1cInN3aXBlci1idXR0b24tbmV4dFwiPjwvZGl2PiAtLT5cclxuICAgIDwhLS0gXHU0RTBBXHU0RTAwXHU5ODc1XHU2MzA5XHU5NEFFIC0tPlxyXG4gICAgPCEtLSA8ZGl2IGNsYXNzPVwic3dpcGVyLWJ1dHRvbi1wcmV2XCI+PC9kaXY+IC0tPlxyXG4gICAgPCEtLSBcdTUyMDZcdTk4NzVcdTVCRkNcdTgyMkEgLS0+XHJcbiAgICA8IS0tIDxkaXYgY2xhc3M9XCJzd2lwZXItcGFnaW5hdGlvblwiPjwvZGl2PiAtLT5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbmBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIGFuY2hvcjoge1xyXG4gICAgICBzbHVnaWZ5OiBnZW5lcmF0ZUFuY2hvcixcclxuICAgIH0sXHJcbiAgICBpbWFnZToge1xyXG4gICAgICBsYXp5TG9hZGluZzogdHJ1ZSxcclxuICAgIH0sXHJcbiAgfVxyXG5cclxuICByZXR1cm4gbWFya2Rvd25cclxufVxyXG5cclxuZnVuY3Rpb24gdGhlbWVDb25maWcoKSB7XHJcbiAgY29uc3QgdGhlbWVDb25maWc6IERlZmF1bHRUaGVtZS5Db25maWcgPSB7XHJcbiAgICBkb2NGb290ZXI6IHtcclxuICAgICAgcHJldjogJ1x1NEUwQVx1NEUwMFx1N0JDNycsXHJcbiAgICAgIG5leHQ6ICdcdTRFMEJcdTRFMDBcdTdCQzcnLFxyXG4gICAgfSxcclxuICAgIGV4dGVybmFsTGlua0ljb246IHRydWUsXHJcbiAgICBvdXRsaW5lOiB7XHJcbiAgICAgIGxldmVsOiBbMiwgM10sXHJcbiAgICAgIGxhYmVsOiAnXHU3NkVFXHU1RjU1JyxcclxuICAgIH0sXHJcbiAgICBuYXY6IFtcclxuICAgICAge1xyXG4gICAgICAgIHRleHQ6ICdcdUQ4M0RcdURDNDAgVE9DJyxcclxuICAgICAgICBsaW5rOiAnL1RPQycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0ZXh0OiAnTWVudXMnLFxyXG4gICAgICAgIGl0ZW1zOiBtZW51SXRlbXMsXHJcbiAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgc2VhcmNoOiB7XHJcbiAgICAgIC8vIFx1NEY3Rlx1NzUyOFx1NjcyQ1x1NTczMFx1NjQxQ1x1N0QyMlx1RkYwOFx1NEUwRFx1NEY5RFx1OEQ1Nlx1OEZEQ1x1N0EwQlx1NjcwRFx1NTJBMVx1NTY2OFx1RkYwOVxyXG4gICAgICBwcm92aWRlcjogJ2xvY2FsJyxcclxuICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgIG1pbmlTZWFyY2g6IHtcclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogXHU2M0E3XHU1MjM2XHU1OTgyXHU0RjU1XHU1QkY5XHU2NTg3XHU2ODYzXHU4RkRCXHU4ODRDXHU1MjA2XHU4QkNEXHUzMDAxXHU1QjU3XHU2QkI1XHU2M0QwXHU1M0Q2XHU3QjQ5XHU5ODg0XHU1OTA0XHU3NDA2XHJcbiAgICAgICAgICAgKiBAdHlwZSB7UGljazxpbXBvcnQoJ21pbmlzZWFyY2gnKS5PcHRpb25zLCAnZXh0cmFjdEZpZWxkJyB8ICd0b2tlbml6ZScgfCAncHJvY2Vzc1Rlcm0nPn1cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAvLyBcdTgxRUFcdTVCOUFcdTRFNDlcdTUyMDZcdThCQ0RcdTkwM0JcdThGOTFcclxuICAgICAgICAgICAgdG9rZW5pemU6ICh0ZXh0LCBsYW5ndWFnZSkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChsYW5ndWFnZSA9PT0gJ3poJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQubWF0Y2goL1tcXHU0ZTAwLVxcdTlmYTVdK3xcXFMrL2cpIHx8IFtdXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiB0ZXh0LnNwbGl0KC9cXHMrLylcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gXHU1QzA2XHU2MjQwXHU2NzA5XHU4QkNEXHU4RjZDXHU0RTNBXHU1QzBGXHU1MTk5XHVGRjBDXHU3ODZFXHU0RkREXHU1OTI3XHU1QzBGXHU1MTk5XHU0RTBEXHU2NTRGXHU2MTFGXHU1MzM5XHU5MTREXHJcbiAgICAgICAgICAgIHByb2Nlc3NUZXJtOiAodGVybSkgPT4gdGVybS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogXHU2M0E3XHU1MjM2XHU2NDFDXHU3RDIyXHU2NUY2XHU3Njg0XHU4ODRDXHU0RTNBXHVGRjA4XHU1OTgyXHU2QTIxXHU3Q0NBXHU1MzM5XHU5MTREXHUzMDAxXHU2NzQzXHU5MUNEXHVGRjA5XHJcbiAgICAgICAgICAgKiBAdHlwZSB7aW1wb3J0KCdtaW5pc2VhcmNoJykuU2VhcmNoT3B0aW9uc31cclxuICAgICAgICAgICAqIEBkZWZhdWx0XHJcbiAgICAgICAgICAgKiB7IGZ1enp5OiAwLjIsIHByZWZpeDogdHJ1ZSwgYm9vc3Q6IHsgdGl0bGU6IDQsIHRleHQ6IDIsIHRpdGxlczogMSB9IH1cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgc2VhcmNoT3B0aW9uczoge1xyXG4gICAgICAgICAgICBmdXp6eTogMC4yLCAvLyBcdTZBMjFcdTdDQ0FcdTUzMzlcdTkxNERcdTk2MDhcdTUwM0NcdUZGMDgwLTFcdUZGMDlcdUZGMENcdTUxNDFcdThCQjhcdTYyRkNcdTUxOTlcdTk1MTlcdThCRUZcdTc2ODRcdTk2MDhcdTUwM0NcdUZGMDhcdTY1NzBcdTUwM0NcdThEOEFcdTRGNEVcdThEOEFcdTRFMjVcdTY4M0NcdUZGMDlcclxuICAgICAgICAgICAgcHJlZml4OiB0cnVlLCAvLyBcdTY2MkZcdTU0MjZcdTU0MkZcdTc1MjhcdTUyNERcdTdGMDBcdTUzMzlcdTkxNERcdUZGMDhcdThGOTNcdTUxNjVcdTIwMUNqYXZcdTIwMURcdTUzRUZcdTUzMzlcdTkxNERcdTIwMUNqYXZhc2NyaXB0XHUyMDFEXHVGRjA5XHJcbiAgICAgICAgICAgIGJvb3N0OiB7XHJcbiAgICAgICAgICAgICAgdGl0bGU6IDEwLCAvLyBcdTY1ODdcdTRFRjZcdTU0MERcdTRGNUNcdTRFM0EgaDEgXHU2ODA3XHU5ODk4XHVGRjBDXHU2NzQzXHU5MUNEXHU2NzAwXHU5QUQ4XHVGRjA4XHU4RkQ5XHU0RTJBIHRpdGxlIFx1NjMwN1x1NzY4NFx1NjYyRiBfcmVuZGVyIFx1OEZENFx1NTZERVx1N0VEM1x1Njc5QyBtZC5yZW5kZXJlciBodG1sIFx1NEUyRFx1NzY4NFx1N0IyQ1x1NEUwMFx1NEUyQSBoMVx1RkYwQ1x1NEY3Rlx1NzUyOCBmb2xkZXJOYW1lIFx1NEY1Q1x1NEUzQVx1N0IyQ1x1NEUwMFx1NEUyQSBoMVx1RkYwQ1x1Njc0M1x1OTFDRFx1NjcwMFx1OUFEOFx1MzAwMlx1RkYwOVxyXG4gICAgICAgICAgICAgIGhlYWRpbmdzOiA1LCAvLyBoMiAtIGg2XHJcbiAgICAgICAgICAgICAgdGV4dDogMywgLy8gXHU2QjYzXHU2NTg3XHU1MTg1XHU1QkI5XHU3RDIyXHU1RjE1XHJcbiAgICAgICAgICAgICAgY29kZTogMSwgLy8gXHU0RUUzXHU3ODAxXHU1NzU3XHU3RDIyXHU1RjE1XHU2NzQzXHU5MUNEXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogXHU2M0E3XHU1MjM2XHU1NEVBXHU0RTlCIE1hcmtkb3duIFx1NTE4NVx1NUJCOVx1NTNDMlx1NEUwRVx1NjcyQ1x1NTczMFx1NjQxQ1x1N0QyMlx1NUYxNVx1NjRDRVx1N0QyMlx1NUYxNVxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgXHU1RjUzXHU1MjREIE1hcmtkb3duIFx1NjU4N1x1NEVGNlx1NzY4NFx1NTM5Rlx1NTlDQlx1NTE4NVx1NUJCOVx1RkYwOFx1NTM3MyAubWQgXHU2NTg3XHU0RUY2XHU0RTJEXHU3Njg0XHU2NTg3XHU2NzJDXHVGRjA5XHJcbiAgICAgICAgICogQHBhcmFtIHtpbXBvcnQoJ3ZpdGVwcmVzcycpLk1hcmtkb3duRW52fSBlbnYgXHU1MzA1XHU1NDJCXHU1RjUzXHU1MjREXHU5ODc1XHU5NzYyXHU3M0FGXHU1ODgzXHU0RkUxXHU2MDZGXHU3Njg0XHU1QkY5XHU4QzYxXHVGRjBDXHU2QkQ0XHU1OTgyIGZyb250bWF0dGVyXHUzMDAxXHU4REVGXHU1Rjg0XHU3QjQ5XHJcbiAgICAgICAgICogQHBhcmFtIHtpbXBvcnQoJ21hcmtkb3duLWl0LWFzeW5jJyl9IG1kIFx1NEUwMFx1NEUyQSBNYXJrZG93biBcdTZFMzJcdTY3RDNcdTU2NjhcdTVCOUVcdTRGOEJcdUZGMENcdTc1MjhcdTY3NjVcdTVDMDYgTWFya2Rvd24gXHU4RjZDXHU2MzYyXHU0RTNBIEhUTUxcclxuICAgICAgICAgKi9cclxuICAgICAgICBhc3luYyBfcmVuZGVyKHNyYywgZW52LCBtZCkge1xyXG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBlbnYucmVsYXRpdmVQYXRoXHJcbiAgICAgICAgICBpZiAoZmlsZVBhdGguaW5jbHVkZXMoJ1RPQy5tZCcpKSByZXR1cm4gJydcclxuXHJcbiAgICAgICAgICAvLyBcdTYzRDBcdTUzRDZcdThERUZcdTVGODRcdTRFMkQgXCJub3Rlcy8uLi5cIiBcdTU0MEVcdTk3NjJcdTc2ODRcdTdCMkNcdTRFMDBcdTRFMkFcdTc2RUVcdTVGNTVcdTU0MERcclxuICAgICAgICAgIGNvbnN0IG5vdGVzSW5kZXggPSBmaWxlUGF0aC5pbmRleE9mKCdub3Rlcy8nKVxyXG4gICAgICAgICAgbGV0IGZvbGRlck5hbWUgPSAnJ1xyXG5cclxuICAgICAgICAgIGlmIChub3Rlc0luZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoQWZ0ZXJOb3RlcyA9IGZpbGVQYXRoLnNsaWNlKG5vdGVzSW5kZXggKyAnbm90ZXMvJy5sZW5ndGgpXHJcbiAgICAgICAgICAgIGZvbGRlck5hbWUgPSBwYXRoQWZ0ZXJOb3Rlcy5zcGxpdCgnLycpWzBdXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gXHU2NjNFXHU1RjBGXHU2REZCXHU1MkEwXHU0RTAwXHU0RTJBXHU5QUQ4XHU2NzQzXHU5MUNEXHU1QjU3XHU2QkI1XHVGRjBDXHU0RjhCXHU1OTgyIFwidGl0bGVcIlxyXG4gICAgICAgICAgY29uc3QgdGl0bGVGaWVsZCA9IGAjICR7Zm9sZGVyTmFtZX1cXG5gXHJcbiAgICAgICAgICBjb25zdCBodG1sID0gbWQucmVuZGVyKHRpdGxlRmllbGQgKyAnXFxuXFxuJyArIHNyYywgZW52KVxyXG5cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdodG1sOicsIGh0bWwpXHJcblxyXG4gICAgICAgICAgcmV0dXJuIGh0bWxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNpZGViYXI6IFsuLi5zaWRlYmFyXSxcclxuICAgIHNvY2lhbExpbmtzLFxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoZW1lQ29uZmlnXHJcbn1cclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IHdpdGhNZXJtYWlkKHtcclxuLy8gICAvLyB5b3VyIGV4aXN0aW5nIHZpdGVwcmVzcyBjb25maWcuLi5cclxuLy8gICAuLi52cENvbmZpZyxcclxuLy8gICAvLyBvcHRpb25hbGx5LCB5b3UgY2FuIHBhc3MgTWVybWFpZENvbmZpZ1xyXG4vLyAgIG1lcm1haWQ6IHtcclxuLy8gICAgIC8vIHJlZmVyIGh0dHBzOi8vbWVybWFpZC5qcy5vcmcvY29uZmlnL3NldHVwL21vZHVsZXMvbWVybWFpZEFQSS5odG1sI21lcm1haWRhcGktY29uZmlndXJhdGlvbi1kZWZhdWx0cyBmb3Igb3B0aW9uc1xyXG4vLyAgIH0sXHJcbi8vICAgLy8gb3B0aW9uYWxseSBzZXQgYWRkaXRpb25hbCBjb25maWcgZm9yIHBsdWdpbiBpdHNlbGYgd2l0aCBNZXJtYWlkUGx1Z2luQ29uZmlnXHJcbi8vICAgbWVybWFpZFBsdWdpbjoge1xyXG4vLyAgICAgY2xhc3M6ICdtZXJtYWlkIG15LWNsYXNzJywgLy8gc2V0IGFkZGl0aW9uYWwgY3NzIGNsYXNzZXMgZm9yIHBhcmVudCBjb250YWluZXJcclxuLy8gICB9LFxyXG4vLyB9KVxyXG4iLCAie1xuICBcImF1dGhvclwiOiBcInRub3Rlc2pzXCIsXG4gIFwicmVwb05hbWVcIjogXCJUTm90ZXMudHlwZXNjcmlwdFwiLFxuICBcImtleXdvcmRzXCI6IFtcbiAgICBcIlROb3Rlcy50eXBlc2NyaXB0XCJcbiAgXSxcbiAgXCJpZ25vcmVfZGlyc1wiOiBbXG4gICAgXCIudnNjb2RlXCIsXG4gICAgXCIwMDAwXCIsXG4gICAgXCJhc3NldHNcIixcbiAgICBcIm5vZGVfbW9kdWxlc1wiLFxuICAgIFwiaGlkZGVuXCIsXG4gICAgXCJkZW1vc1wiLFxuICAgIFwiYXNzZXRzXCJcbiAgXSxcbiAgXCJyb290U2lkZWJhckRpclwiOiBcIi4uL1ROb3Rlcy9zaWRlYmFyc1wiLFxuICBcInJvb3RfaXRlbVwiOiB7XG4gICAgXCJpY29uXCI6IHtcbiAgICAgIFwic3JjXCI6IFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3Rub3Rlc2pzL2ltZ3NAbWFpbi9hc3NldHMvaWNvbi0tdHlwZXNjcmlwdC5zdmdcIlxuICAgIH0sXG4gICAgXCJ0aXRsZVwiOiBcInR5cGVzY3JpcHRcIixcbiAgICBcImNvbXBsZXRlZF9ub3Rlc19jb3VudFwiOiA2MCxcbiAgICBcImRldGFpbHNcIjogXCJUUyBcdTdCMTRcdThCQjBcIixcbiAgICBcImxpbmtcIjogXCJodHRwczovL3Rub3Rlc2pzLmdpdGh1Yi5pby9UTm90ZXMudHlwZXNjcmlwdC9cIixcbiAgICBcImNyZWF0ZWRfYXRcIjogMTcyNzA0Njc4NzAwMCxcbiAgICBcInVwZGF0ZWRfYXRcIjogMTc2MTgxODM3OTU3NyxcbiAgICBcImRheXNfc2luY2VfYmlydGhcIjogOTIxOVxuICB9LFxuICBcInBvcnRcIjogOTIxOSxcbiAgXCJtZW51SXRlbXNcIjogW1xuICAgIHtcbiAgICAgIFwidGV4dFwiOiBcIlx1RDgzQ1x1REZFMCBIb21lXCIsXG4gICAgICBcImxpbmtcIjogXCIvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidGV4dFwiOiBcIlx1MjY5OVx1RkUwRiBTZXR0aW5nc1wiLFxuICAgICAgXCJsaW5rXCI6IFwiL1NldHRpbmdzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidGV4dFwiOiBcIlx1RDgzRFx1RENEMiBUTm90ZXNcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vdG5vdGVzanMuZ2l0aHViLmlvL1ROb3Rlc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInRleHRcIjogXCJcdUQ4M0RcdURDQzIgVE5vdGVzLnl1cXVlXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3d3dy55dXF1ZS5jb20vdGRhaHV5b3UvdG5vdGVzLnl1cXVlXCJcbiAgICB9XG4gIF0sXG4gIFwic29jaWFsTGlua3NcIjogW1xuICAgIHtcbiAgICAgIFwiYXJpYUxhYmVsXCI6IFwiVGRhaHV5b3UgXHU4QkVEXHU5NkMwXHU0RTNCXHU5ODc1XHU5NEZFXHU2M0E1XCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3d3dy55dXF1ZS5jb20vdGRhaHV5b3VcIixcbiAgICAgIFwiaWNvblwiOiB7XG4gICAgICAgIFwic3ZnXCI6IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIGQ9XFxcIk0xNy4yOCAyLjk1NWMyLjk3LjIwMyAzLjc1NiAyLjM0MiAzLjg0IDIuNTk3bDEuMjk3LjA5NmMuMTMgMCAuMTY5LjE4LjA1NC4yMzZjLTEuMzIzLjcxNi0xLjcyNyAyLjE3LTEuNDkgMy4xMThjLjA5LjM1OC4yNTQuNjkuNDEyIDEuMDJjLjMwNy42NDIuNjUxIDEuNDE4LjcwNyAyLjk4MWMuMTE3IDMuMjQtMi41MSA2LjE3NS01Ljc4OSA2LjU5M2MxLjE3LTEuMTg3IDEuODE1LTIuNDQ0IDIuMTItMy4zNzVjLjYwNi0xLjg0Ni41MDgtMy4zMTYuMDU1LTQuNDRhNC40NiA0LjQ2IDAgMCAwLTEuNzgyLTIuMTQxYy0xLjY4My0xLjAyLTMuMjItMS4wOS00LjQ0NC0uNzYyYy40NjUtLjU5NC44NzYtMS4yMDEgMS4yLTEuODY0Yy41ODQtMS42NS0uMTAyLTIuODQ4LS43MDQtMy41MTljLS4xOTItLjI0Ni0uMDYxLS42NTUuMzA1LS42NTVjMS40MSAwIDIuODEzLjAyIDQuMjIuMTE1TTMuMzIgMTkuMTA3YzEuOTI0LTIuMjAyIDQuNzEyLTUuMzk0IDcuMTYyLTguMTVjLjU1OS0uNjMgMi43NjktMi4zMzggNS43NDgtLjUzM2MuODc4LjUzMiAyLjQzIDIuMTY1IDEuMzMyIDUuNTFjLS44MDMgMi40NDYtNC40MDggNy43OTYtMTUuNzYgNS44NDRjLS4yMjctLjAzOS0uNTExLS4zNTQtLjIxOC0uNjg3elxcXCIvPjwvc3ZnPlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcImFyaWFMYWJlbFwiOiBcIlRkYWh1eW91IEIgXHU3QUQ5XHU0RTNCXHU5ODc1XHU5NEZFXHU2M0E1XCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3NwYWNlLmJpbGliaWxpLmNvbS80MDcyNDEwMDRcIixcbiAgICAgIFwiaWNvblwiOiB7XG4gICAgICAgIFwic3ZnXCI6IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIxMDI0XFxcIiBoZWlnaHQ9XFxcIjEwMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiPjxnIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCI+PHBhdGggZD1cXFwiTTMxMC4xMzQgNTk2LjQ1Yy03Ljk5OS00LjQ2My0xNi40OTgtOC40My0yNC45OTctMTEuOWEyNzQgMjc0IDAgMCAwLTI2Ljk5Ni03LjQzOGMtMi41LS45OTItMi41Ljk5MS0yLjUgMS40ODdjMCA3LjkzNC41IDE4Ljg0MyAxLjUgMjcuNzY4YzEgNy40MzggMiAxNS4zNzIgNCAyMi44MWMwIC40OTYgMCAuOTkxLjUgMS40ODdjLjk5OS45OTIgMS45OTkgMS40ODggMi45OTkuNDk2YzcuOTk5LTQuNDYzIDE1Ljk5OC04LjQzIDIyLjk5Ny0xMy4zODhjNy40OTktNS40NTQgMTUuNDk4LTExLjkgMjEuOTk3LTE4LjM0N2MxLjUtMS40ODcgMC0yLjQ3OS41LTIuOTc1bTMyMy45Ni0xMS45YTI3NCAyNzQgMCAwIDAtMjYuOTk3LTcuNDM4Yy0yLjUtLjk5Mi0yLjUuOTkxLTIuNSAxLjQ4N2MwIDcuOTM0LjUgMTguODQzIDEuNSAyNy43NjhjMSA3LjQzOCAyIDE1LjM3MiA0IDIyLjgxYzAgLjQ5NiAwIC45OTEuNSAxLjQ4N2MxIC45OTIgMiAxLjQ4OCAzIC40OTZjNy45OTktNC40NjMgMTUuOTk4LTguNDMgMjIuOTk3LTEzLjM4OGM3LjQ5OS01LjQ1NCAxNS40OTgtMTEuOSAyMS45OTctMTguMzQ3YzItMS40ODcuNS0yLjQ3OS41LTIuOTc1Yy03LjUtNC40NjMtMTYuNDk4LTguNDMtMjQuOTk3LTExLjlcXFwiLz48cGF0aCBkPVxcXCJNNzQxLjQ5NiAxMTJIMjgzYy05NC41MDEgMC0xNzEgNzYuNS0xNzEgMTcxLjV2NDU4Yy41IDk0IDc3IDE3MC41IDE3MC45OTkgMTcwLjVoNDU3Ljk5N2M5NC41IDAgMTcxLjAwMi03Ni41IDE3MS4wMDItMTcwLjV2LTQ1OGMuNDk3LTk1LTc2LjAwMi0xNzEuNS0xNzAuNTAyLTE3MS41bTk1IDM0My41aDE1LjV2NDhoLTE1LjV6bS05NS41LTEuNWwyIDQzbC0xMy41IDEuNWwtNS00NC41em0tMjMuNSAwbDQgNDUuNWwtMTQuNSAxLjVsLTYuNS00Ny41aDE3em0tMjMwLjQ5OCAxLjVoMTV2NDhoLTE1em0tOTYtMS41bDIgNDNsLTEzLjUgMS41bC01LTQ0LjV6bS0yMy41IDBsNCA0NS41bC0xNC41IDJsLTYtNDcuNXptLTMuNSAxNDlDMzQzLjQ5OCA2NjguNSAyMTYgNjYyLjUgMjA0LjUgNjYwLjVDMTk1LjUgNDk5IDE4MS41IDQ2NCAxNzAgMzg1bDU0LjUtMjIuNWMxIDcxLjUgOSAxODUgOSAxODVzMTA4LjUtMTUuNSAxMzIgNDdjLjUgMyAwIDYtMS41IDguNW0yMC41IDM1LjVsLTIzLjUtMTI0aDM1LjVsMTMgMTIzem00NC41LThsLTI3LTIzNWwzMy41LTEuNWwyMSAyMzZINDI5em0zNC0xNzVoMTcuNXY0OEg0Njd6bTQxIDE5MGgtMjYuNWwtOS41LTEyNmgzNnptMjA5Ljk5OC00M0M2OTMuNDk2IDY2OCA1NjUuOTk3IDY2MiA1NTQuNDk3IDY2MGMtOS0xNjEtMjMtMTk2LTM0LjUtMjc1bDU0LjUtMjIuNWMxIDcxLjUgOSAxODUgOSAxODVzMTA4LjUtMTUuNSAxMzIgNDYuNWMuNSAzIDAgNi0xLjUgOC41bTE5LjUgMzZsLTIzLTEyNGgzNS41bDEzIDEyM3ptNDUuNS04bC0yNy41LTIzNWwzMy41LTEuNWwyMSAyMzZoLTI3em0zMy41LTE3NWgxNy41djQ4aC0xM3ptNDEgMTkwaC0yNi41bC05LjUtMTI2aDM2elxcXCIvPjwvZz48L3N2Zz5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJhcmlhTGFiZWxcIjogXCJUTm90ZXMudHlwZXNjcmlwdCBnaXRodWIgXHU0RUQzXHU1RTkzXHU5NEZFXHU2M0E1XCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdG5vdGVzanMvVE5vdGVzLnR5cGVzY3JpcHRcIixcbiAgICAgIFwiaWNvblwiOiBcImdpdGh1YlwiXG4gICAgfVxuICBdLFxuICBcImlkXCI6IFwiXCJcbn0iLCAiW3tcInRleHRcIjpcIjEuIFx1NUI2Nlx1NEU2MFx1OEQ0NFx1NjU5OVwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjcwNSBUeXBlU2NyaXB0XHVGRjA4XHU5NjJFXHU0RTAwXHU1Q0YwXHVGRjA5XCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAwMi4gVHlwZVNjcmlwdFx1RkYwOFx1OTYyRVx1NEUwMFx1NUNGMFx1RkYwOS9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1NjcyRlx1OEJFRFx1ODg2OFwiLFwibGlua1wiOlwiL25vdGVzLzAwNTQuIFx1NjcyRlx1OEJFRFx1ODg2OC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IHJvYWRtYXBcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDM5LiByb2FkbWFwL1JFQURNRVwifV19LHtcInRleHRcIjpcIjIuIFRTIFx1N0I4MFx1NEVDQlwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjcwNSBUUyBcdTdCODBcdTRFQ0JcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDA4LiBUUyBcdTdCODBcdTRFQ0IvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBUUyBcdTY2MkZcdTRFQzBcdTRFNDhcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDAxLiBUUyBcdTY2MkZcdTRFQzBcdTRFNDgvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBUUyBcdTc2ODRcdTUzRDFcdTVDNTVcdTdCODBcdTUzRjJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDAzLiBUUyBcdTc2ODRcdTUzRDFcdTVDNTVcdTdCODBcdTUzRjIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBUUyBcdTc2ODRcdTUzNUFcdTVCQTJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDA1LiBUUyBcdTc2ODRcdTUzNUFcdTVCQTIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBcdTdDN0JcdTU3OEIgdnMuIFx1NTAzQ1wiLFwibGlua1wiOlwiL25vdGVzLzAwMDQuIFx1N0M3Qlx1NTc4QiB2cy4gXHU1MDNDL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU5NzYyXHU1NDExXHU1QkY5XHU4QzYxXHU3Njg0XHU2MDFEXHU3RUY0XHU2NUI5XHU1RjBGXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAwNi4gXHU5NzYyXHU1NDExXHU1QkY5XHU4QzYxXHU3Njg0XHU2MDFEXHU3RUY0XHU2NUI5XHU1RjBGL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU1MkE4XHU2MDAxXHU3QzdCXHU1NzhCIHZzLiBcdTk3NTlcdTYwMDFcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDA3LiBcdTUyQThcdTYwMDFcdTdDN0JcdTU3OEIgdnMuIFx1OTc1OVx1NjAwMVx1N0M3Qlx1NTc4Qi9SRUFETUVcIn1dfSx7XCJ0ZXh0XCI6XCIzLiBcdTU3RkFcdTY3MkNcdTc1MjhcdTZDRDVcIixcImNvbGxhcHNlZFwiOnRydWUsXCJpdGVtc1wiOlt7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU1N0ZBXHU2NzJDXHU3NTI4XHU2Q0Q1XCIsXCJsaW5rXCI6XCIvbm90ZXMvMDA0NC4gXHU1N0ZBXHU2NzJDXHU3NTI4XHU2Q0Q1L1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU3QzdCXHU1NzhCXHU1OEYwXHU2NjBFXHU1NDhDXHU3QzdCXHU1NzhCXHU2M0E4XHU2NUFEXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAwOS4gXHU3QzdCXHU1NzhCXHU1OEYwXHU2NjBFXHU1NDhDXHU3QzdCXHU1NzhCXHU2M0E4XHU2NUFEL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgVFMgXHU3Njg0XHU3RjE2XHU4QkQxXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAxMC4gVFMgXHU3Njg0XHU3RjE2XHU4QkQxL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgVFMgUGxheWdyb3VuZFwiLFwibGlua1wiOlwiL25vdGVzLzAwMTEuIFRTIFBsYXlncm91bmQvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSB0c2MgXHU1N0ZBXHU2NzJDXHU0RjdGXHU3NTI4XCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAxMi4gdHNjIFx1NTdGQVx1NjcyQ1x1NEY3Rlx1NzUyOC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IHRzLW5vZGUgXHU1N0ZBXHU2NzJDXHU0RjdGXHU3NTI4XCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAxMy4gdHMtbm9kZSBcdTU3RkFcdTY3MkNcdTRGN0ZcdTc1MjgvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBub2RlbW9uIFx1NTdGQVx1NjcyQ1x1NEY3Rlx1NzUyOFwiLFwibGlua1wiOlwiL25vdGVzLzAwNDEuIG5vZGVtb24gXHU1N0ZBXHU2NzJDXHU0RjdGXHU3NTI4L1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgdHMtbm9kZS1kZXYgXHU1N0ZBXHU2NzJDXHU0RjdGXHU3NTI4XCIsXCJsaW5rXCI6XCIvbm90ZXMvMDA0Mi4gdHMtbm9kZS1kZXYgXHU1N0ZBXHU2NzJDXHU0RjdGXHU3NTI4L1JFQURNRVwifV19LHtcInRleHRcIjpcIjQuIFx1OTg3Nlx1NUM0Mlx1N0M3Qlx1NTc4Qlx1NTQ4Q1x1NUU5NVx1NUM0Mlx1N0M3Qlx1NTc4QlwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjcwNSBcdTk4NzZcdTVDNDJcdTdDN0JcdTU3OEJcdTU0OENcdTVFOTVcdTVDNDJcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDQ2LiBcdTk4NzZcdTVDNDJcdTdDN0JcdTU3OEJcdTU0OENcdTVFOTVcdTVDNDJcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBhbnkgXHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAxNC4gYW55IFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IHVua25vd24gXHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAxNS4gdW5rbm93biBcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBuZXZlciBcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDE2LiBuZXZlciBcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9XX0se1widGV4dFwiOlwiNS4gXHU3QzdCXHU1NzhCXHU3Q0ZCXHU3RURGXHU1N0ZBXHU3ODQwXHU3N0U1XHU4QkM2XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbe1widGV4dFwiOlwiXHUyNzA1IGJvb2xlYW4gXHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAxOC4gYm9vbGVhbiBcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBzdHJpbmcgXHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAxOS4gc3RyaW5nIFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IG51bWJlciBcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDIwLiBudW1iZXIgXHU3QzdCXHU1NzhCL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgYmlnaW50IFx1N0M3Qlx1NTc4QlwiLFwibGlua1wiOlwiL25vdGVzLzAwMjEuIGJpZ2ludCBcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBzeW1ib2wgXHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAyMi4gc3ltYm9sIFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IG9iamVjdCBcdTdDN0JcdTU3OEJcdTU0OEMgT2JqZWN0IFx1N0M3Qlx1NTc4QlwiLFwibGlua1wiOlwiL25vdGVzLzAwMjMuIG9iamVjdCBcdTdDN0JcdTU3OEJcdTU0OEMgT2JqZWN0IFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IHVuZGVmaW5lZCBcdTdDN0JcdTU3OEJcdTU0OEMgbnVsbCBcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDI0LiB1bmRlZmluZWQgXHU3QzdCXHU1NzhCXHU1NDhDIG51bGwgXHU3QzdCXHU1NzhCL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU1MzA1XHU4OEM1XHU1QkY5XHU4QzYxXHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDA0Ny4gXHU1MzA1XHU4OEM1XHU1QkY5XHU4QzYxXHU3QzdCXHU1NzhCL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU1QjU3XHU5NzYyXHU5MUNGXHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAyNS4gXHU1QjU3XHU5NzYyXHU5MUNGXHU3QzdCXHU1NzhCL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU4MDU0XHU1NDA4XHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAyNi4gXHU4MDU0XHU1NDA4XHU3QzdCXHU1NzhCL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU0RUE0XHU1M0M5XHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAyNy4gXHU0RUE0XHU1M0M5XHU3QzdCXHU1NzhCL1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgdHlwZSBcdTUxNzNcdTk1MkVcdTVCNTdcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDI4LiB0eXBlIFx1NTE3M1x1OTUyRVx1NUI1Ny9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IHR5cGVvZiBcdThGRDBcdTdCOTdcdTdCMjZcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDI5LiB0eXBlb2YgXHU4RkQwXHU3Qjk3XHU3QjI2L1JFQURNRVwifSx7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU3QzdCXHU1NzhCXHU0RjVDXHU3NTI4XHU1N0RGXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAzMC4gXHU3QzdCXHU1NzhCXHU0RjVDXHU3NTI4XHU1N0RGL1JFQURNRVwifV19LHtcInRleHRcIjpcIjYuIFx1N0M3Qlx1NTc4Qlx1NTE3Q1x1NUJCOVx1NjAyN1wiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjcwNSBcdTdDN0JcdTU3OEJcdTUxN0NcdTVCQjlcdTYwMjdcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDMxLiBcdTdDN0JcdTU3OEJcdTUxN0NcdTVCQjlcdTYwMjcvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBcdTdFRDNcdTY3ODRcdTVCNTBcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDY3LiBcdTdFRDNcdTY3ODRcdTVCNTBcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBcdTdDN0JcdTU3OEJcdTc2ODRcdTcyMzZcdTVCNTBcdTUxNzNcdTdDRkJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDcyLiBcdTdDN0JcdTU3OEJcdTc2ODRcdTcyMzZcdTVCNTBcdTUxNzNcdTdDRkIvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBcdTVCRjlcdThDNjFcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTlcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDY4LiBcdTVCRjlcdThDNjFcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTkvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBcdTUxRkRcdTY1NzBcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTlcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDY5LiBcdTUxRkRcdTY1NzBcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTkvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBcdTdDN0JcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTlcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDcxLiBcdTdDN0JcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTkvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjNGMCBcdTZDREJcdTU3OEJcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTlcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDcwLiBcdTZDREJcdTU3OEJcdTdDN0JcdTU3OEJcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcdTg5QzRcdTUyMTkvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBcdTcyNzlcdTZCOEFcdTdDN0JcdTU3OEJcdTRFNEJcdTk1RjRcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjdcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDE3LiBcdTcyNzlcdTZCOEFcdTdDN0JcdTU3OEJcdTRFNEJcdTk1RjRcdTc2ODRcdTUxN0NcdTVCQjlcdTYwMjcvUkVBRE1FXCJ9XX0se1widGV4dFwiOlwiNy4gXHU2NTcwXHU3RUM0XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbe1widGV4dFwiOlwiXHUyNzA1IFx1NjU3MFx1N0VDNFx1N0M3Qlx1NTc4QlwiLFwibGlua1wiOlwiL25vdGVzLzAwMzIuIFx1NjU3MFx1N0VDNFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn1dfSx7XCJ0ZXh0XCI6XCI4LiBcdTUxNDNcdTdFQzRcIixcImNvbGxhcHNlZFwiOnRydWUsXCJpdGVtc1wiOlt7XCJ0ZXh0XCI6XCJcdTI3MDUgXHU1MTQzXHU3RUM0XHU3QzdCXHU1NzhCXCIsXCJsaW5rXCI6XCIvbm90ZXMvMDAzNi4gXHU1MTQzXHU3RUM0XHU3QzdCXHU1NzhCL1JFQURNRVwifV19LHtcInRleHRcIjpcIjkuIFx1NTFGRFx1NjU3MFwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjcwNSBcdTUxRkRcdTY1NzBcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDM0LiBcdTUxRkRcdTY1NzBcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9XX0se1widGV4dFwiOlwiMTAuIFx1NUJGOVx1OEM2MVwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjcwNSBcdTVCRjlcdThDNjFcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDMzLiBcdTVCRjlcdThDNjFcdTdDN0JcdTU3OEIvUkVBRE1FXCJ9XX0se1widGV4dFwiOlwiMTEuIFx1NjNBNVx1NTNFM1wiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjcwNSBpbnRlcmZhY2UgXHU1MTczXHU5NTJFXHU1QjU3XCIsXCJsaW5rXCI6XCIvbm90ZXMvMDA1Mi4gaW50ZXJmYWNlIFx1NTE3M1x1OTUyRVx1NUI1Ny9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IHR5cGUgdnMuIGludGVyZmFjZVwiLFwibGlua1wiOlwiL25vdGVzLzAwNTMuIHR5cGUgdnMuIGludGVyZmFjZS9SRUFETUVcIn1dfSx7XCJ0ZXh0XCI6XCIxMi4gXHU3QzdCXCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbe1widGV4dFwiOlwiXHUyM0YwIGNsYXNzIFx1N0M3Qlx1NTc4QlwiLFwibGlua1wiOlwiL25vdGVzLzAwMzUuIGNsYXNzIFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NUM1RVx1NjAyN1x1NEUyNVx1NjgzQ1x1NTIxRFx1NTlDQlx1NTMxNlwiLFwibGlua1wiOlwiL25vdGVzLzAwNjYuIFx1N0M3Qlx1NUM1RVx1NjAyN1x1NEUyNVx1NjgzQ1x1NTIxRFx1NTlDQlx1NTMxNi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NEUyRFx1NzY4NFx1NTNDMlx1NjU3MFx1NUM1RVx1NjAyN1wiLFwibGlua1wiOlwiL25vdGVzLzAwNTYuIFx1N0M3Qlx1NEUyRFx1NzY4NFx1NTNDMlx1NjU3MFx1NUM1RVx1NjAyNy9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyM0YwIFx1NjJCRFx1OEM2MVx1N0M3QlwiLFwibGlua1wiOlwiL25vdGVzLzAwNTcuIFx1NjJCRFx1OEM2MVx1N0M3Qi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NEUyRFx1NzY4NFx1NUI1OFx1NTNENlx1NTY2OFwiLFwibGlua1wiOlwiL25vdGVzLzAwNTguIFx1N0M3Qlx1NEUyRFx1NzY4NFx1NUI1OFx1NTNENlx1NTY2OC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NUI5RVx1NzNCMFx1NjNBNVx1NTNFM1wiLFwibGlua1wiOlwiL25vdGVzLzAwNTkuIFx1N0M3Qlx1NUI5RVx1NzNCMFx1NjNBNVx1NTNFMy9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NEUyRFx1NzY4NFx1NTNFQVx1OEJGQlx1NUM1RVx1NjAyN1wiLFwibGlua1wiOlwiL25vdGVzLzAwNjAuIFx1N0M3Qlx1NEUyRFx1NzY4NFx1NTNFQVx1OEJGQlx1NUM1RVx1NjAyNy9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NzY4NFx1OTc1OVx1NjAwMVx1NjIxMFx1NTQ1OFwiLFwibGlua1wiOlwiL25vdGVzLzAwNjEuIFx1N0M3Qlx1NzY4NFx1OTc1OVx1NjAwMVx1NjIxMFx1NTQ1OC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NzY4NFx1NEUwOVx1NEUyQVx1NTNFRlx1OEJCRlx1OTVFRVx1NjAyN1x1NEZFRVx1OTk3MFx1N0IyNlwiLFwibGlua1wiOlwiL25vdGVzLzAwNjIuIFx1N0M3Qlx1NzY4NFx1NEUwOVx1NEUyQVx1NTNFRlx1OEJCRlx1OTVFRVx1NjAyN1x1NEZFRVx1OTk3MFx1N0IyNi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NzY4NFx1N0VFN1x1NjI3RlwiLFwibGlua1wiOlwiL25vdGVzLzAwNjQuIFx1N0M3Qlx1NzY4NFx1N0VFN1x1NjI3Ri9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyM0YwIFx1NUI1MFx1N0M3Qlx1OTFDRFx1NTE5OVx1NzIzNlx1N0M3Qlx1NTQwQ1x1NTQwRFx1NjIxMFx1NTQ1OFwiLFwibGlua1wiOlwiL25vdGVzLzAwNjMuIFx1NUI1MFx1N0M3Qlx1OTFDRFx1NTE5OVx1NzIzNlx1N0M3Qlx1NTQwQ1x1NTQwRFx1NjIxMFx1NTQ1OC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NEUyRFx1NzY4NCB0aGlzIFx1NTNDMlx1NjU3MFx1NTQ4QyB0aGlzIFx1N0M3Qlx1NTc4QlwiLFwibGlua1wiOlwiL25vdGVzLzAwNTUuIFx1N0M3Qlx1NEUyRFx1NzY4NCB0aGlzIFx1NTNDMlx1NjU3MFx1NTQ4QyB0aGlzIFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyNzA1IFx1N0M3Qlx1NEUwRVx1NTFGRFx1NjU3MFx1NzY4NFx1OTAwOVx1NjJFOVwiLFwibGlua1wiOlwiL25vdGVzLzAwNjUuIFx1N0M3Qlx1NEUwRVx1NTFGRFx1NjU3MFx1NzY4NFx1OTAwOVx1NjJFOS9SRUFETUVcIn1dfSx7XCJ0ZXh0XCI6XCIxMy4gXHU2Q0RCXHU1NzhCXCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbe1widGV4dFwiOlwiXHUyM0YwIFx1NkNEQlx1NTc4QlwiLFwibGlua1wiOlwiL25vdGVzLzAwMzguIFx1NkNEQlx1NTc4Qi9SRUFETUVcIn1dfSx7XCJ0ZXh0XCI6XCIxNC4gRW51bSBcdTdDN0JcdTU3OEJcIixcImNvbGxhcHNlZFwiOnRydWUsXCJpdGVtc1wiOlt7XCJ0ZXh0XCI6XCJcdTIzRjAgRW51bSBcdTdDN0JcdTU3OEJcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDM3LiBFbnVtIFx1N0M3Qlx1NTc4Qi9SRUFETUVcIn1dfSx7XCJ0ZXh0XCI6XCIxNS4gXHU3QzdCXHU1NzhCXHU2NUFEXHU4QTAwXCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbe1widGV4dFwiOlwiXHUyM0YwIFx1N0M3Qlx1NTc4Qlx1NjVBRFx1OEEwMFwiLFwibGlua1wiOlwiL25vdGVzLzAwNTEuIFx1N0M3Qlx1NTc4Qlx1NjVBRFx1OEEwMC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyM0YwIFx1N0M3Qlx1NTc4Qlx1NjVBRFx1OEEwMFx1NzY4NFx1Njc2MVx1NEVGNlwiLFwibGlua1wiOlwiL25vdGVzLzAwNDAuIFx1N0M3Qlx1NTc4Qlx1NjVBRFx1OEEwMFx1NzY4NFx1Njc2MVx1NEVGNi9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyM0YwIGFzIGNvbnN0IFx1NjVBRFx1OEEwMFwiLFwibGlua1wiOlwiL25vdGVzLzAwNDguIGFzIGNvbnN0IFx1NjVBRFx1OEEwMC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyM0YwIFx1OTc1RVx1N0E3QVx1NjVBRFx1OEEwMFwiLFwibGlua1wiOlwiL25vdGVzLzAwNDkuIFx1OTc1RVx1N0E3QVx1NjVBRFx1OEEwMC9SRUFETUVcIn0se1widGV4dFwiOlwiXHUyM0YwIFx1NjVBRFx1OEEwMFx1NTFGRFx1NjU3MFwiLFwibGlua1wiOlwiL25vdGVzLzAwNTAuIFx1NjVBRFx1OEEwMFx1NTFGRFx1NjU3MC9SRUFETUVcIn1dfSx7XCJ0ZXh0XCI6XCIxNi4gXHU2QTIxXHU1NzU3XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbXX0se1widGV4dFwiOlwiMTcuIG5hbWVzcGFjZVwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W119LHtcInRleHRcIjpcIjE4LiBcdTg4QzVcdTk5NzBcdTU2NjhcIixcImNvbGxhcHNlZFwiOnRydWUsXCJpdGVtc1wiOltdfSx7XCJ0ZXh0XCI6XCIxOS4gXHU4OEM1XHU5OTcwXHU1NjY4XHVGRjA4XHU2NUU3XHU4QkVEXHU2Q0Q1XHVGRjA5XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbXX0se1widGV4dFwiOlwiMjAuIGRlY2xhcmUgXHU1MTczXHU5NTJFXHU1QjU3XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbXX0se1widGV4dFwiOlwiMjEuIGQudHMgXHU3QzdCXHU1NzhCXHU1OEYwXHU2NjBFXHU2NTg3XHU0RUY2XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbXX0se1widGV4dFwiOlwiMjIuIFx1N0M3Qlx1NTc4Qlx1OEZEMFx1N0I5N1x1N0IyNlwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W119LHtcInRleHRcIjpcIjIzLiBcdTdDN0JcdTU3OEJcdTY2MjBcdTVDMDRcIixcImNvbGxhcHNlZFwiOnRydWUsXCJpdGVtc1wiOltdfSx7XCJ0ZXh0XCI6XCIyNC4gXHU3QzdCXHU1NzhCXHU1REU1XHU1MTc3XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbXX0se1widGV4dFwiOlwiMjUuIFx1NkNFOFx1OTFDQVx1NjMwN1x1NEVFNFwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W119LHtcInRleHRcIjpcIjI2LiB0c2NvbmZpZy5qc29uIFx1NjU4N1x1NEVGNlwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W119LHtcInRleHRcIjpcIjI3LiB0c2MgXHU1NDdEXHU0RUU0XCIsXCJjb2xsYXBzZWRcIjp0cnVlLFwiaXRlbXNcIjpbXX0se1widGV4dFwiOlwiMjguIFx1NkRGMVx1NTE2NVx1NTM5Rlx1NzQwNlwiLFwiY29sbGFwc2VkXCI6dHJ1ZSxcIml0ZW1zXCI6W3tcInRleHRcIjpcIlx1MjNGMCBcdTZERjFcdTUxNjVcdTUzOUZcdTc0MDZcIixcImxpbmtcIjpcIi9ub3Rlcy8wMDQ1LiBcdTZERjFcdTUxNjVcdTUzOUZcdTc0MDYvUkVBRE1FXCJ9LHtcInRleHRcIjpcIlx1MjcwNSBTb3VyY2UgTWFwIFx1NzY4NFx1NTdGQVx1NjcyQ1x1Njk4Mlx1NUZGNVx1NTQ4Q1x1NTM5Rlx1NzQwNlwiLFwibGlua1wiOlwiL25vdGVzLzAwNDMuIFNvdXJjZSBNYXAgXHU3Njg0XHU1N0ZBXHU2NzJDXHU2OTgyXHU1RkY1XHU1NDhDXHU1MzlGXHU3NDA2L1JFQURNRVwifV19LHtcInRleHRcIjpcIjI5LiBcdTdBN0FcIixcImNvbGxhcHNlZFwiOnRydWUsXCJpdGVtc1wiOltdfV0iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXHRub3Rlc2pzXFxcXFROb3Rlcy50eXBlc2NyaXB0XFxcXC52aXRlcHJlc3NcXFxccGx1Z2luc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFxwbHVnaW5zXFxcXGhtci5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovdG5vdGVzanMvVE5vdGVzLnR5cGVzY3JpcHQvLnZpdGVwcmVzcy9wbHVnaW5zL2htci5qc1wiO2ltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnXHJcbmltcG9ydCBmcyBmcm9tICdmcydcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcclxuaW1wb3J0IHtcclxuICBST09UX0RJUl9QQVRILFxyXG4gIGlnbm9yZV9kaXJzLFxyXG4gIFJFUE9fTk9URVNfVVJMLFxyXG4gIE5PVEVTX1RPQ19TVEFSVF9UQUcsXHJcbiAgTk9URVNfVE9DX0VORF9UQUcsXHJcbiAgQklMSUJJTElfVklERU9fQkFTRV9VUkwsXHJcbiAgVE5PVEVTX1lVUVVFX0JBU0VfVVJMLFxyXG4gIEVPTCxcclxuICByZXBvTmFtZSxcclxufSBmcm9tICcuLi90bm90ZXMvY29uc3RhbnRzLmpzJ1xyXG5pbXBvcnQgeyBjcmVhdGVBZGROdW1iZXJUb1RpdGxlLCBnZW5lcmF0ZVRvYyB9IGZyb20gJy4uL3Rub3Rlcy91dGlscydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIFROX0hNUl9QbHVnaW4oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICd0bi1obXItcGx1Z2luJyxcclxuICAgIGNvbmZpZ3VyZVNlcnZlcihzZXJ2ZXIpIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIFx1NUU3M1x1NTc0NyAzcyBcdTUxODVcdTUzRUFcdTU5MDRcdTc0MDZcdTRFMDBcdTZCMjEgaG1yXHJcbiAgICAgICAqL1xyXG4gICAgICBjb25zdCBIQU5ETEVfRFVSQVRJT04gPSAzICogMTAwMFxyXG4gICAgICBsZXQgbGFzdEhhbmRsZVRpbWUgPSBEYXRlLm5vdygpXHJcbiAgICAgIGxldCBpc0htckVuYWJsZSA9IHRydWVcclxuXHJcbiAgICAgIC8vIFx1NzZEMVx1NTQyQ1x1NjU4N1x1NEVGNlx1NTNEOFx1NTMxNlx1NEU4Qlx1NEVGNlxyXG4gICAgICBzZXJ2ZXIud2F0Y2hlci5vbignYWxsJywgYXN5bmMgKGV2ZW50LCBmaWxlUGF0aCkgPT4ge1xyXG4gICAgICAgIC8vIC9Vc2Vycy9odXlvdWRhL3Rub3Rlc2pzL1ROb3Rlcy5sZWV0Y29kZS9ub3Rlcy8wMDAyLiB4eHgvUkVBRE1FLm1kXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3BhdGguYmFzZW5hbWUoZmlsZVBhdGgpJywgcGF0aC5iYXNlbmFtZShmaWxlUGF0aCkpXHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdEYXRlLm5vdygpJywgRGF0ZS5ub3coKSlcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbGFzdFVwZGF0ZVRpbWUnLCBsYXN0VXBkYXRlVGltZSlcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnRGF0ZS5ub3coKSAtIGxhc3RVcGRhdGVUaW1lJywgRGF0ZS5ub3coKSAtIGxhc3RVcGRhdGVUaW1lKVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdcdTY3MDBcdThGRDFcdTRFMjRcdTZCMjFcdTY2RjRcdTY1QjBcdTc2ODRcdTY1RjZcdTk1RjRcdTk1RjRcdTk2OTRcdUZGMUEnLCBEYXRlLm5vdygpIC0gbGFzdEhhbmRsZVRpbWUpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0hSTSBcdTVGMDBcdTUxNzNcdTY2MkZcdTU0MjZcdTYyNTNcdTVGMDBcdUZGMUEnLCBpc0htckVuYWJsZSlcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBEYXRlLm5vdygpIC0gbGFzdEhhbmRsZVRpbWUgPCBIQU5ETEVfRFVSQVRJT04gfHwgLy8gXHU1OTgyXHU2NzlDXHU2NzAwXHU4RkQxXHU0RTI0XHU2QjIxXHU2NkY0XHU2NUIwXHU3Njg0XHU2NUY2XHU5NUY0XHU5NzAwXHU4OTgxXHU1QzBGXHU0RThFIFVQREFURV9USU1FT1VUIFx1OTYwOFx1NTAzQ1x1RkYwQ1x1NzZGNFx1NjNBNSByZXR1cm5cclxuICAgICAgICAgICFpc0htckVuYWJsZSAvLyBcdTU5ODJcdTY3OUMgaG1yIFx1ODhBQlx1Nzk4MVx1NzUyOFx1RkYwQ1x1NzZGNFx1NjNBNSByZXR1cm5cclxuICAgICAgICApIHtcclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygnW2htcl0nLCBmaWxlUGF0aClcclxuICAgICAgICBsYXN0SGFuZGxlVGltZSA9IERhdGUubm93KClcclxuICAgICAgICBpc0htckVuYWJsZSA9IGZhbHNlXHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpXHJcbiAgICAgICAgICBjb25zdCBub3Rlc1N0YXRzID0gYXdhaXQgZnMucHJvbWlzZXMubHN0YXQoZmlsZVBhdGgpXHJcbiAgICAgICAgICBjb25zdCBub3Rlc0Rpck5hbWUgPSBwYXRoLmJhc2VuYW1lKHBhdGguZGlybmFtZShmaWxlUGF0aCkpXHJcblxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBiYXNlbmFtZSA9PT0gJ1JFQURNRS5tZCcgJiZcclxuICAgICAgICAgICAgbm90ZXNTdGF0cy5pc0ZpbGUoKSAmJlxyXG4gICAgICAgICAgICBub3Rlc0Rpck5hbWUubWF0Y2goL15cXGR7NH0uXFxzLykgJiZcclxuICAgICAgICAgICAgIWlnbm9yZV9kaXJzLmluY2x1ZGVzKG5vdGVzRGlyTmFtZSlcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAvLyAgIGBcdTIzMUJcdUZFMEYgdXBkYXRlIHN0YXJ0ID0+ICR7bm90ZXNEaXJOYW1lfSA9PiAke2VuY29kZVVSSUNvbXBvbmVudChcclxuICAgICAgICAgICAgLy8gICAgIGZpbGVQYXRoXHJcbiAgICAgICAgICAgIC8vICAgKX1gXHJcbiAgICAgICAgICAgIC8vIClcclxuICAgICAgICAgICAgbGV0IGxpbmVzID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUoZmlsZVBhdGgsICd1dGYtOCcpXHJcbiAgICAgICAgICAgIGxpbmVzID0gbGluZXMuc3BsaXQoRU9MKVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbGluZXMnLCBsaW5lcylcclxuXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aXRsZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgbGluZXNbMF0gPSBgIyBbJHtub3Rlc0Rpck5hbWV9XSgke1JFUE9fTk9URVNfVVJMfS8ke2VuY29kZVVSSUNvbXBvbmVudChcclxuICAgICAgICAgICAgICBub3Rlc0Rpck5hbWVcclxuICAgICAgICAgICAgKX0pYFxyXG5cclxuICAgICAgICAgICAgLy8gdXBkYXRlIHRvYyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICBsZXQgc3RhcnRMaW5lSWR4ID0gLTEsXHJcbiAgICAgICAgICAgICAgZW5kTGluZUlkeCA9IC0xXHJcbiAgICAgICAgICAgIGxpbmVzLmZvckVhY2goKGxpbmUsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoTk9URVNfVE9DX1NUQVJUX1RBRykpIHN0YXJ0TGluZUlkeCA9IGlkeFxyXG4gICAgICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoTk9URVNfVE9DX0VORF9UQUcpKSBlbmRMaW5lSWR4ID0gaWR4XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmIChzdGFydExpbmVJZHggIT09IC0xICYmIGVuZExpbmVJZHggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgY29uc3Qgbm90ZXNJRCA9IG5vdGVzRGlyTmFtZS5zbGljZSgwLCA0KVxyXG4gICAgICAgICAgICAgIGNvbnN0IHRpdGxlcyA9IFtdXHJcbiAgICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IFsnIyMgJywgJyMjIyAnLCAnIyMjIyAnLCAnIyMjIyMgJywgJyMjIyMjIyAnXSAvLyAyfjYgXHU3RUE3XHU2ODA3XHU5ODk4XHVGRjBDXHU1RkZEXHU3NTY1IDEgXHU3RUE3XHU2ODA3XHU5ODk4XHUzMDAyXHJcbiAgICAgICAgICAgICAgY29uc3QgYWRkTnVtYmVyVG9UaXRsZSA9IGNyZWF0ZUFkZE51bWJlclRvVGl0bGUoKVxyXG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNIZWFkZXIgPSBoZWFkZXJzLnNvbWUoKGhlYWRlcikgPT5cclxuICAgICAgICAgICAgICAgICAgbGluZS5zdGFydHNXaXRoKGhlYWRlcilcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIGlmIChpc0hlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBbbnVtYmVyZWRUaXRsZV0gPSBhZGROdW1iZXJUb1RpdGxlKGxpbmUpXHJcbiAgICAgICAgICAgICAgICAgIHRpdGxlcy5wdXNoKG51bWJlcmVkVGl0bGUpXHJcbiAgICAgICAgICAgICAgICAgIGxpbmVzW2ldID0gbnVtYmVyZWRUaXRsZSAvLyBcdTY2RjRcdTY1QjBcdTUzOUZcdTg4NENcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgY29uc3QgdG9jID0gZ2VuZXJhdGVUb2ModGl0bGVzLCAyKVxyXG4gICAgICAgICAgICAgIGxldCBiaWxpYmlsaVRPQ0l0ZW1zID0gW11cclxuICAgICAgICAgICAgICBsZXQgdG5vdGVzVE9DSXRlbXMgPSBbXVxyXG4gICAgICAgICAgICAgIGxldCB5dXF1ZVRPQ0l0ZW1zID0gW11cclxuICAgICAgICAgICAgICBjb25zdCBjb25maWdQYXRoID0gcGF0aC5yZXNvbHZlKFxyXG4gICAgICAgICAgICAgICAgcGF0aC5kaXJuYW1lKGZpbGVQYXRoKSxcclxuICAgICAgICAgICAgICAgICcudG5vdGVzLmpzb24nXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIGxldCBub3Rlc0NvbmZpZyA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGNvbmZpZ1BhdGgsICd1dGY4JylcclxuICAgICAgICAgICAgICBub3Rlc0NvbmZpZyA9IEpTT04ucGFyc2Uobm90ZXNDb25maWcpXHJcbiAgICAgICAgICAgICAgaWYgKG5vdGVzQ29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm90ZXNDb25maWcuYmlsaWJpbGkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICBiaWxpYmlsaVRPQ0l0ZW1zID0gbm90ZXNDb25maWcuYmlsaWJpbGkubWFwKFxyXG4gICAgICAgICAgICAgICAgICAgIChidmlkLCBpKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgYCAgLSBbYmlsaWJpbGkuJHtyZXBvTmFtZX0uJHtub3Rlc0lEfS4ke2kgKyAxfV0oJHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQklMSUJJTElfVklERU9fQkFTRV9VUkwgKyBidmlkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9KWBcclxuICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5vdGVzQ29uZmlnLnRub3Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRub3Rlc1RPQ0l0ZW1zID0gbm90ZXNDb25maWcudG5vdGVzLm1hcChcclxuICAgICAgICAgICAgICAgICAgICAoW3Rub3Rlc05hbWUsIG5vdGVzSUQsIG5vdGVzTmFtZV0sIGkpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICBgICAtIFtUTm90ZXMuJHt0bm90ZXNOYW1lfSAtICR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzSUQgKyAobm90ZXNOYW1lID8gYC4gJHtub3Rlc05hbWV9L1JFQURNRWAgOiAnJylcclxuICAgICAgICAgICAgICAgICAgICAgIH1dKCR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBodHRwczovL3Rub3Rlc2pzLmdpdGh1Yi5pby9UTm90ZXMuJHt0bm90ZXNOYW1lfS9ub3Rlcy9gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm90ZXNJRCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChub3Rlc05hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGAuJTIwJHtlbmNvZGVVUklDb21wb25lbnQobm90ZXNOYW1lKX0vUkVBRE1FYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICB9KWBcclxuICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5vdGVzQ29uZmlnLnl1cXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgeXVxdWVUT0NJdGVtcyA9IG5vdGVzQ29uZmlnLnl1cXVlLm1hcChcclxuICAgICAgICAgICAgICAgICAgICAoc2x1ZywgaSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgIGAgIC0gW1ROb3Rlcy55dXF1ZS4ke3JlcG9OYW1lLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdUTm90ZXMuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgICAgICl9LiR7bm90ZXNJRH1dKCR7VE5PVEVTX1lVUVVFX0JBU0VfVVJMICsgc2x1Z30pYFxyXG4gICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBjb25zdCBpbnNlcnRUb2NJdGVtcyA9IFtdXHJcblxyXG4gICAgICAgICAgICAgIGlmIChiaWxpYmlsaVRPQ0l0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGluc2VydFRvY0l0ZW1zLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIGAtIFtcdUQ4M0RcdURDRkEgYmlsaWJpbGkgXHVEODNEXHVEQzQ5IFROb3RlcyBcdTU0MDhcdTk2QzZdKGh0dHBzOi8vc3BhY2UuYmlsaWJpbGkuY29tLzQwNzI0MTAwNClgLFxyXG4gICAgICAgICAgICAgICAgICAuLi5iaWxpYmlsaVRPQ0l0ZW1zXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAodG5vdGVzVE9DSXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaW5zZXJ0VG9jSXRlbXMucHVzaChcclxuICAgICAgICAgICAgICAgICAgYC0gW1x1RDgzRFx1RENEMiBUTm90ZXNdKGh0dHBzOi8vdG5vdGVzanMuZ2l0aHViLmlvL1ROb3Rlcy8pYCxcclxuICAgICAgICAgICAgICAgICAgLi4udG5vdGVzVE9DSXRlbXNcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmICh5dXF1ZVRPQ0l0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGluc2VydFRvY0l0ZW1zLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIGAtIFtcdUQ4M0RcdURDQzIgVE5vdGVzLnl1cXVlXSgke1ROT1RFU19ZVVFVRV9CQVNFX1VSTH0pYCxcclxuICAgICAgICAgICAgICAgICAgLi4ueXVxdWVUT0NJdGVtc1xyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgbGluZXMuc3BsaWNlKFxyXG4gICAgICAgICAgICAgICAgc3RhcnRMaW5lSWR4ICsgMSxcclxuICAgICAgICAgICAgICAgIGVuZExpbmVJZHggLSBzdGFydExpbmVJZHggLSAxLFxyXG4gICAgICAgICAgICAgICAgJycsXHJcbiAgICAgICAgICAgICAgICAuLi5pbnNlcnRUb2NJdGVtcyxcclxuICAgICAgICAgICAgICAgIC4uLnRvYy5yZXBsYWNlKG5ldyBSZWdFeHAoYF4ke0VPTH1gKSwgJycpLnNwbGl0KEVPTClcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1NTE5OVx1NTE2NVx1NTI0RFx1NjgwN1x1OEJCMFxyXG5cclxuICAgICAgICAgICAgYXdhaXQgZnMucHJvbWlzZXMud3JpdGVGaWxlKGZpbGVQYXRoLCBsaW5lcy5qb2luKEVPTCkpXHJcblxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgLy8gICBgXHUyNzA1IHVwZGF0ZSBlbmQgPT4gJHtub3Rlc0Rpck5hbWV9ID0+ICR7ZW5jb2RlVVJJQ29tcG9uZW50KFxyXG4gICAgICAgICAgICAvLyAgICAgZmlsZVBhdGhcclxuICAgICAgICAgICAgLy8gICApfWBcclxuICAgICAgICAgICAgLy8gKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERTgwICR7RGF0ZS5ub3coKSAtIHN0YXJ0VGltZX0gbXNgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBldmVudCAhPT0gJ3VubGlua0RpcicgJiZcclxuICAgICAgICAgICAgIVsnRU5PRU5UJywgJ0VOT1RESVInXS5pbmNsdWRlcyhlcnIuY29kZSlcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXHUyNzRDIHRuIGhtciBlcnJvcicsIGVycilcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgaXNIbXJFbmFibGUgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICB9XHJcbn1cclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFx0bm90ZXNqc1xcXFxUTm90ZXMudHlwZXNjcmlwdFxcXFwudml0ZXByZXNzXFxcXHRub3Rlc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFx0bm90ZXNcXFxcY29uc3RhbnRzLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdC8udml0ZXByZXNzL3Rub3Rlcy9jb25zdGFudHMuanNcIjtpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJ1xyXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJ1xyXG5pbXBvcnQgeyBnZXRUbm90ZXNDb25maWcgfSBmcm9tICcuL3V0aWxzL2luZGV4LmpzJ1xyXG5cclxuY29uc3Qge1xyXG4gIGF1dGhvcixcclxuICBpZ25vcmVfZGlycyxcclxuICByZXBvTmFtZSxcclxuICBzb2NpYWxMaW5rcyxcclxuICBtZW51SXRlbXMsXHJcbiAgc2lkZWJhcl9pc05vdGVzSURWaXNpYmxlLFxyXG4gIHNpZGViYXJfaXNDb2xsYXBzZWQsXHJcbiAgcG9ydCxcclxuICByb290U2lkZWJhckRpcixcclxuICByb290X2l0ZW0sXHJcbn0gPSBnZXRUbm90ZXNDb25maWcoKVxyXG5cclxuZXhwb3J0IHtcclxuICBhdXRob3IsXHJcbiAgaWdub3JlX2RpcnMsXHJcbiAgbWVudUl0ZW1zLFxyXG4gIHBvcnQsXHJcbiAgcmVwb05hbWUsXHJcbiAgcm9vdFNpZGViYXJEaXIsXHJcbiAgc2lkZWJhcl9pc0NvbGxhcHNlZCxcclxuICBzaWRlYmFyX2lzTm90ZXNJRFZpc2libGUsXHJcbiAgc29jaWFsTGlua3MsXHJcbiAgcm9vdF9pdGVtLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQklMSUJJTElfVklERU9fQkFTRV9VUkwgPSAnaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvLydcclxuZXhwb3J0IGNvbnN0IFROT1RFU19ZVVFVRV9CQVNFX1VSTCA9XHJcbiAgJ2h0dHBzOi8vd3d3Lnl1cXVlLmNvbS90ZGFodXlvdS90bm90ZXMueXVxdWUvJ1xyXG5cclxuZXhwb3J0IGNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCkpXHJcblxyXG4vKipcclxuICogVE5vdGVzLiogXHU3QjE0XHU4QkIwXHU0RUQzXHU1RTkzXHU3Njg0XHU1N0ZBXHU4REVGXHU1Rjg0XHJcbiAqIEBleGFtcGxlXHJcbiAqIGAvVXNlcnMvaHV5b3VkYS96bS9ub3Rlcy9gIFx1MzAxMFx1NTcyOFx1NkI2NFx1NzZFRVx1NUY1NVx1NEUwQlx1NUI1OFx1NjUzRVx1NTE3Nlx1NUI4MyBUTm90ZXMuKiBcdTdCMTRcdThCQjBcdTRFRDNcdTVFOTNcdTMwMTFcclxuICovXHJcbmV4cG9ydCBjb25zdCBUTk9URVNfQkFTRV9ESVIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nKVxyXG5leHBvcnQgY29uc3QgRU5fV09SRFNfRElSID0gcGF0aC5yZXNvbHZlKFROT1RFU19CQVNFX0RJUiwgJ1ROb3Rlcy5lbi13b3JkcycpXHJcblxyXG4vKipcclxuICogVE5vdGVzLiogXHU1RjUzXHU1MjREXHU3Njg0XHU3QjE0XHU4QkIwXHU0RUQzXHU1RTkzXHU2ODM5XHU4REVGXHU1Rjg0XHJcbiAqIEBleGFtcGxlXHJcbiAqIGAvVXNlcnMvaHV5b3VkYS96bS9ub3Rlcy9UTm90ZXMudGVtcGxhdGUvYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFJPT1RfRElSX1BBVEggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nKVxyXG5leHBvcnQgY29uc3QgUk9PVF9SRUFETUVfUEFUSCA9IHBhdGgucmVzb2x2ZShST09UX0RJUl9QQVRILCAnUkVBRE1FLm1kJylcclxuZXhwb3J0IGNvbnN0IFJPT1RfQ09ORklHX1BBVEggPSBwYXRoLnJlc29sdmUoUk9PVF9ESVJfUEFUSCwgJy50bm90ZXMuanNvbicpXHJcbmV4cG9ydCBjb25zdCBOT1RFU19ESVJfUEFUSCA9IHBhdGgucmVzb2x2ZShST09UX0RJUl9QQVRILCAnbm90ZXMnKVxyXG5leHBvcnQgY29uc3QgVlBfRElSX1BBVEggPSBwYXRoLnJlc29sdmUoUk9PVF9ESVJfUEFUSCwgJy52aXRlcHJlc3MnKVxyXG5leHBvcnQgY29uc3QgUFVCTElDX1BBVEggPSBwYXRoLnJlc29sdmUoUk9PVF9ESVJfUEFUSCwgJ3B1YmxpYycpXHJcbmV4cG9ydCBjb25zdCBHSVRIVUJfRElSX1BBVEggPSBwYXRoLnJlc29sdmUoUk9PVF9ESVJfUEFUSCwgJy5naXRodWInKVxyXG5leHBvcnQgY29uc3QgR0lUSFVCX0RFUExPWVlNTF9QQVRIID0gcGF0aC5yZXNvbHZlKFxyXG4gIEdJVEhVQl9ESVJfUEFUSCxcclxuICAnd29ya2Zsb3dzJyxcclxuICAnZGVwbG95LnltbCdcclxuKVxyXG5leHBvcnQgY29uc3QgVlBfVE9DX1BBVEggPSBwYXRoLnJlc29sdmUoUk9PVF9ESVJfUEFUSCwgJ1RPQy5tZCcpXHJcbmV4cG9ydCBjb25zdCBWUF9TSURFQkFSX1BBVEggPSBwYXRoLnJlc29sdmUoUk9PVF9ESVJfUEFUSCwgJ3NpZGViYXIuanNvbicpXHJcbmV4cG9ydCBjb25zdCBST09UX1BLR19QQVRIID0gcGF0aC5yZXNvbHZlKFJPT1RfRElSX1BBVEgsICdwYWNrYWdlLmpzb24nKVxyXG5leHBvcnQgY29uc3QgVlNDT0RFX1NFVFRJTkdTX1BBVEggPSBwYXRoLnJlc29sdmUoXHJcbiAgUk9PVF9ESVJfUEFUSCxcclxuICAnLnZzY29kZScsXHJcbiAgJ3NldHRpbmdzLmpzb24nXHJcbilcclxuZXhwb3J0IGNvbnN0IFZTQ09ERV9UQVNLU19QQVRIID0gcGF0aC5yZXNvbHZlKFxyXG4gIFJPT1RfRElSX1BBVEgsXHJcbiAgJy52c2NvZGUnLFxyXG4gICd0YXNrcy5qc29uJ1xyXG4pXHJcblxyXG5leHBvcnQgY29uc3QgRU9MID0gJ1xcbidcclxuZXhwb3J0IGNvbnN0IE1FUkdFRF9SRUFETUVfRklMRU5BTUUgPSAnTUVSR0VEX1JFQURNRS5tZCdcclxuZXhwb3J0IGNvbnN0IE1FUkdFRF9SRUFETUVfUEFUSCA9IHBhdGgucmVzb2x2ZShcclxuICBST09UX0RJUl9QQVRILFxyXG4gIE1FUkdFRF9SRUFETUVfRklMRU5BTUVcclxuKVxyXG5leHBvcnQgY29uc3QgU0VQRVJBVE9SID0gYDwhLS0gIT09PT09PT4gU0VQRVJBVE9SIDw9PT09PT0gLS0+YFxyXG5cclxuZXhwb3J0IGNvbnN0IE5PVEVTX1RPQ19TVEFSVF9UQUcgPSAnPCEtLSByZWdpb246dG9jIC0tPidcclxuZXhwb3J0IGNvbnN0IE5PVEVTX1RPQ19FTkRfVEFHID0gJzwhLS0gZW5kcmVnaW9uOnRvYyAtLT4nXHJcblxyXG5leHBvcnQgY29uc3QgUkVQT19VUkwgPSBgaHR0cHM6Ly9naXRodWIuY29tLyR7YXV0aG9yfS8ke3JlcG9OYW1lfS90cmVlL21haW5gXHJcbmV4cG9ydCBjb25zdCBSRVBPX05PVEVTX1VSTCA9IGBodHRwczovL2dpdGh1Yi5jb20vJHthdXRob3J9LyR7cmVwb05hbWV9L3RyZWUvbWFpbi9ub3Rlc2BcclxuXHJcbi8qKlxyXG4gKiBcdTU5MDRcdTc0MDZcdTU2RkVcdTcyNDdcdThENDRcdTZFOTBcdThERUZcdTVGODRcclxuICogQGV4YW1wbGVcclxuICogaHR0cHM6Ly9naXRodWIuY29tL1RkYWh1eW91L1ROb3Rlcy5odG1sLWNzcy1qcy9ibG9iL21haW4vbm90ZXMvMDAwMC8lRTUlQjAlODElRTklOUQlQTIvSmF2YVNjcmlwdC5wbmc/cmF3PXRydWVcclxuICovXHJcbmV4cG9ydCBjb25zdCBSRVBPX0JMT0JfVVJMXzEgPSBgaHR0cHM6Ly9naXRodWIuY29tLyR7YXV0aG9yfS8ke3JlcG9OYW1lfS9ibG9iL21haW4vbm90ZXNgXHJcbmV4cG9ydCBjb25zdCBSRVBPX0JMT0JfVVJMXzIgPSBgP3Jhdz10cnVlYFxyXG5cclxuZXhwb3J0IGNvbnN0IEdJVEhVQl9QQUdFX1VSTCA9IGBodHRwczovL3Rub3Rlc2pzLmdpdGh1Yi5pby8ke3JlcG9OYW1lfWBcclxuZXhwb3J0IGNvbnN0IEdJVEhVQl9QQUdFX05PVEVTX1VSTCA9IGBodHRwczovL3Rub3Rlc2pzLmdpdGh1Yi5pby8ke3JlcG9OYW1lfS9ub3Rlc2BcclxuXHJcbi8qKlxyXG4gKiBcdTY1QjBcdTU4OUVcdTdCMTRcdThCQjAgUkVBRE1FLm1kIFx1NkEyMVx1Njc3RlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE5FV19OT1RFU19SRUFETUVfTURfVEVNUExBVEUgPSBgXHJcblxyXG48IS0tIHJlZ2lvbjp0b2MgLS0+XHJcblxyXG4tIFsxLiBcdUQ4M0NcdURGQUYgXHU2NzJDXHU4MjgyXHU1MTg1XHU1QkI5XSgjMS0tXHU2NzJDXHU4MjgyXHU1MTg1XHU1QkI5KVxyXG4tIFsyLiBcdUQ4M0VcdURFRTcgXHU4QkM0XHU0RUY3XSgjMi0tXHU4QkM0XHU0RUY3KVxyXG5cclxuPCEtLSBlbmRyZWdpb246dG9jIC0tPlxyXG5cclxuIyMgMS4gXHVEODNDXHVERkFGIFx1NjcyQ1x1ODI4Mlx1NTE4NVx1NUJCOVxyXG5cclxuLSB0b2RvXHJcblxyXG4jIyAyLiBcdUQ4M0VcdURFRTcgXHU4QkM0XHU0RUY3XHJcblxyXG4tIHRvZG9cclxuXHJcbmBcclxuXHJcbi8qKlxyXG4gKiBcdTY1QjBcdTU4OUVcdTdCMTRcdThCQjAgLnRub3Rlcy5qc29uIFx1NkEyMVx1Njc3RlxyXG4gKi9cclxuY29uc3QgTkVXX05PVEVTX1ROT1RFU19KU09OX1RFTVBMQVRFID0ge1xyXG4gIGJpbGliaWxpOiBbXSxcclxuICB0bm90ZXM6IFtdLFxyXG4gIHl1cXVlOiBbXSxcclxuICBkb25lOiBmYWxzZSxcclxuICBlbmFibGVEaXNjdXNzaW9uczogZmFsc2UsXHJcbiAgY3JlYXRlZF9hdDogLTEsXHJcbiAgdXBkYXRlZF9hdDogLTEsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXROZXdOb3Rlc1Rub3Rlc0pzb25UZW1wbGF0ZSA9IChuZWVkVG9TdHJpbmcgPSB0cnVlKSA9PiB7XHJcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKVxyXG4gIGNvbnN0IHRlbXAgPSB7XHJcbiAgICAuLi5ORVdfTk9URVNfVE5PVEVTX0pTT05fVEVNUExBVEUsXHJcbiAgICBpZDogdXVpZHY0KCksXHJcbiAgICBjcmVhdGVkX2F0OiBub3csXHJcbiAgICB1cGRhdGVkX2F0OiBub3csXHJcbiAgfVxyXG4gIGlmIChuZWVkVG9TdHJpbmcpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0ZW1wLCBudWxsLCAyKVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdGVtcFxyXG4gIH1cclxufVxyXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXHRub3Rlc2pzXFxcXFROb3Rlcy50eXBlc2NyaXB0XFxcXC52aXRlcHJlc3NcXFxcdG5vdGVzXFxcXHV0aWxzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFx0bm90ZXNqc1xcXFxUTm90ZXMudHlwZXNjcmlwdFxcXFwudml0ZXByZXNzXFxcXHRub3Rlc1xcXFx1dGlsc1xcXFxhZGRfbnVtYmVyX3RvX3RpdGxlLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdC8udml0ZXByZXNzL3Rub3Rlcy91dGlscy9hZGRfbnVtYmVyX3RvX3RpdGxlLmpzXCI7LyoqXHJcbiAqIFx1NURFNVx1NTM4Mlx1NTFGRFx1NjU3MFx1RkYwQ1x1NTIxQlx1NUVGQVx1NEUwMFx1NEUyQVx1NUUyNlx1NjcwOVx1NzJFQ1x1N0FDQlx1N0YxNlx1NTNGN1x1NzJCNlx1NjAwMVx1NzY4NFx1NjgwN1x1OTg5OFx1N0YxNlx1NTNGN1x1NzUxRlx1NjIxMFx1NTY2OFx1MzAwMlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFx1OEZENFx1NTZERSBhZGROdW1iZXJUb1RpdGxlIFx1NjVCOVx1NkNENVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFkZE51bWJlclRvVGl0bGUoKSB7XHJcbiAgY29uc3QgdGl0bGVOdW1iZXJzID0gQXJyYXkoNykuZmlsbCgwKSAvLyBcdTc1MjhcdTRFOEVcdTVCNThcdTUwQThcdTZCQ0ZcdTRFMkFcdTdFQTdcdTUyMkJcdTc2ODRcdTdGMTZcdTUzRjdcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGFkZE51bWJlclRvVGl0bGUodGl0bGUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKHRpdGxlLCB0aXRsZS5lbmRzV2l0aCgnXFxyJykpO1xyXG5cclxuICAgIC8vIFx1NkI2M1x1NTIxOVx1NTMzOVx1OTE0RFx1NjNEMFx1NTNENlx1NjgwN1x1OTg5OFx1NEZFMVx1NjA2RlxyXG4gICAgY29uc3QgbWF0Y2ggPSB0aXRsZS5tYXRjaChcclxuICAgICAgL14oXFwjKylcXHMqKChcXGQrKFxcLlxcZCopPyhcXC5cXGQqKT8oXFwuXFxkKik/KFxcLlxcZCopPyhcXC5cXGQqKT8pXFwuXFxzKik/KC4qKS8gLy8gIVx1NkNFOFx1NjEwRlx1RkYxQXdpbmRvd3MgXHU3M0FGXHU1ODgzXHU0RTBCXHVGRjBDXHU4QkZCXHU1MjMwXHU3Njg0IHRpdGxlIFx1N0VEM1x1NUMzRVx1NEYxQVx1NUUyNlx1NjcwOVx1NEUwMFx1NEUyQSAvclx1RkYwQ1x1NTcyOFx1NkI2M1x1NTIxOVx1NTMzOVx1OTE0RFx1NzY4NFx1NjVGNlx1NTAxOVx1RkYwQ1x1NEUwRFx1ODk4MVx1OEJCMFx1NEUwQVx1N0VEM1x1NUMzRSAkXHJcbiAgICApXHJcbiAgICBjb25zdCBwbGFpblRpdGxlID0gbWF0Y2ggPyBtYXRjaFs5XS50cmltKCkgOiB0aXRsZS50cmltKClcclxuXHJcbiAgICBjb25zdCBsZXZlbCA9IHRpdGxlLmluZGV4T2YoJyAnKVxyXG4gICAgY29uc3QgYmFzZUxldmVsID0gMiAvLyBcdTU3RkFcdTc4NDBcdTdFQTdcdTUyMkJcdTRFM0EyXHJcblxyXG4gICAgLy8gXHU0RTAwXHU3RUE3XHU2ODA3XHU5ODk4XHU0RTBEXHU3RjE2XHU1M0Y3XHJcbiAgICBpZiAobGV2ZWwgPT09IDEpIHJldHVybiBbdGl0bGUsIHBsYWluVGl0bGVdXHJcblxyXG4gICAgLy8gXHU5MUNEXHU3RjZFXHU1RjUzXHU1MjREXHU3RUE3XHU1MjJCXHU0RUU1XHU0RTBBXHU3Njg0XHU3RjE2XHU1M0Y3XHJcbiAgICBmb3IgKGxldCBpID0gbGV2ZWwgKyAxOyBpIDwgdGl0bGVOdW1iZXJzLmxlbmd0aDsgaSsrKSB0aXRsZU51bWJlcnNbaV0gPSAwXHJcblxyXG4gICAgLy8gXHU1ODlFXHU1MkEwXHU1RjUzXHU1MjREXHU3RUE3XHU1MjJCXHU3Njg0XHU3RjE2XHU1M0Y3XHJcbiAgICB0aXRsZU51bWJlcnNbbGV2ZWxdICs9IDFcclxuXHJcbiAgICAvLyBcdTc1MUZcdTYyMTBcdTY1QjBcdTc2ODRcdTdGMTZcdTUzRjdcclxuICAgIGNvbnN0IG5ld051bWJlciA9IHRpdGxlTnVtYmVycy5zbGljZShiYXNlTGV2ZWwsIGxldmVsICsgMSkuam9pbignLicpXHJcblxyXG4gICAgLy8gXHU2Nzg0XHU1RUZBXHU2NUIwXHU3Njg0XHU2ODA3XHU5ODk4XHJcbiAgICBjb25zdCBoZWFkZXJTeW1ib2wgPSB0aXRsZS5zbGljZSgwLCBsZXZlbCkudHJpbSgpIC8vIFx1ODNCN1x1NTNENlx1NTM5Rlx1NjcwOVx1NzY4NCAjIFx1N0IyNlx1NTNGN1xyXG4gICAgY29uc3QgbmV3VGl0bGUgPSBgJHtoZWFkZXJTeW1ib2x9ICR7bmV3TnVtYmVyfS4gJHtwbGFpblRpdGxlfWBcclxuXHJcbiAgICByZXR1cm4gW25ld1RpdGxlLCBwbGFpblRpdGxlXVxyXG4gIH1cclxufVxyXG5cclxuLy8gdGVzdFxyXG5cclxuLy8gY29uc3QgYWRkTnVtYmVyVG9UaXRsZSA9IGNyZWF0ZUFkZE51bWJlclRvVGl0bGUoKVxyXG5cclxuLy8gY29uc29sZS5sb2coYWRkTnVtYmVyVG9UaXRsZSgnIyBpdGVtJykpIC8vIFsgJyMgaXRlbScsICdpdGVtJyBdXHJcbi8vIGNvbnNvbGUubG9nKGFkZE51bWJlclRvVGl0bGUoJyMjIGl0ZW0nKSkgLy8gWyAnIyMgMS4gaXRlbScsICdpdGVtJyBdXHJcbi8vIGNvbnNvbGUubG9nKGFkZE51bWJlclRvVGl0bGUoJyMjIGl0ZW0nKSkgLy8gWyAnIyMgMi4gaXRlbScsICdpdGVtJyBdXHJcbi8vIGNvbnNvbGUubG9nKGFkZE51bWJlclRvVGl0bGUoJyMjIyBpdGVtJykpIC8vIFsgJyMjIyAyLjEuIGl0ZW0nLCAnaXRlbScgXVxyXG4vLyBjb25zb2xlLmxvZyhhZGROdW1iZXJUb1RpdGxlKCcjIyMgaXRlbScpKSAvLyBbICcjIyMgMi4yLiBpdGVtJywgJ2l0ZW0nIF1cclxuLy8gY29uc29sZS5sb2coYWRkTnVtYmVyVG9UaXRsZSgnIyMgaXRlbScpKSAvLyBbICcjIyAzLiBpdGVtJywgJ2l0ZW0nIF1cclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFx0bm90ZXNqc1xcXFxUTm90ZXMudHlwZXNjcmlwdFxcXFwudml0ZXByZXNzXFxcXHRub3Rlc1xcXFx1dGlsc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFx0bm90ZXNcXFxcdXRpbHNcXFxcZ2VuX2FuY2hvci5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovdG5vdGVzanMvVE5vdGVzLnR5cGVzY3JpcHQvLnZpdGVwcmVzcy90bm90ZXMvdXRpbHMvZ2VuX2FuY2hvci5qc1wiO2ltcG9ydCBHaXRodWJTbHVnZ2VyIGZyb20gJ2dpdGh1Yi1zbHVnZ2VyJyAvLyBkb2M6IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2dpdGh1Yi1zbHVnZ2VyXHJcbmNvbnN0IHNsdWdnZXIgPSBuZXcgR2l0aHViU2x1Z2dlcigpXHJcblxyXG4vLyAhXHU2Q0U4XHU2MTBGXHVGRjFBXHUzMDEwMVx1MzAxMVx1MzAwMVx1MzAxMDJcdTMwMTFcdTRFMkRcdTk1MUFcdTcwQjlcdTc2ODRcdTc1MUZcdTYyMTBcdTg5QzRcdTUyMTlcdTg5ODFcdTRGRERcdTYzMDFcdTRFMDBcdTgxRjRcdTMwMDJcclxuLy8gXHUzMDEwMVx1MzAxMSAudml0ZXByZXNzL2NvbmZpZy5tdHMgLSBtYXJrZG93bi5hbmNob3Iuc2x1Z2lmeVxyXG4vLyBcdTMwMTAyXHUzMDExIC52aXRlcHJlc3MvdG5vdGVzL3VwZGF0ZS5qc1xyXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVBbmNob3IgPSAobGFiZWwpID0+IHtcclxuICBzbHVnZ2VyLnJlc2V0KClcclxuICByZXR1cm4gc2x1Z2dlci5zbHVnKGxhYmVsKVxyXG59XHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFx0bm90ZXNcXFxcdXRpbHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXHRub3Rlc2pzXFxcXFROb3Rlcy50eXBlc2NyaXB0XFxcXC52aXRlcHJlc3NcXFxcdG5vdGVzXFxcXHV0aWxzXFxcXGdlbl90b2MuanNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L3Rub3Rlc2pzL1ROb3Rlcy50eXBlc2NyaXB0Ly52aXRlcHJlc3MvdG5vdGVzL3V0aWxzL2dlbl90b2MuanNcIjtpbXBvcnQgeyBFT0wgfSBmcm9tICcuLi9jb25zdGFudHMuanMnXHJcbmltcG9ydCB7IGdlbmVyYXRlQW5jaG9yIH0gZnJvbSAnLi9nZW5fYW5jaG9yLmpzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVG9jKHRpdGxlcywgYmFzZUxldmVsID0gMikge1xyXG4gIGNvbnN0IHRvYyA9IHRpdGxlc1xyXG4gICAgLm1hcCgodGl0bGUpID0+IHtcclxuICAgICAgY29uc3QgbGV2ZWwgPSB0aXRsZS5pbmRleE9mKCcgJylcclxuICAgICAgY29uc3QgdGV4dCA9IHRpdGxlLnNsaWNlKGxldmVsKS50cmltKClcclxuICAgICAgY29uc3QgYW5jaG9yID0gZ2VuZXJhdGVBbmNob3IodGV4dClcclxuICAgICAgcmV0dXJuICcgJy5yZXBlYXQoKGxldmVsIC0gYmFzZUxldmVsKSAqIDIpICsgYC0gWyR7dGV4dH1dKCMke2FuY2hvcn0pYFxyXG4gICAgfSlcclxuICAgIC5qb2luKEVPTClcclxuICAvLyAhXHU1NzI4IFRPQyBcdTUzM0FcdTU3REYgPCEtLSByZWdpb246dG9jIC0tPiAuLi4gPCEtLSBlbmRyZWdpb246dG9jIC0tPiBcdTUyNERcdTU0MEVcdTZERkJcdTUyQTBcdTYzNjJcdTg4NENcdTdCMjYgLSBcdTkwMDJcdTkxNEQgcHJldHRpZXIgXHU2ODNDXHU1RjBGXHU1MzE2XHJcbiAgcmV0dXJuIGAke0VPTH0ke3RvY30ke0VPTH1gXHJcbn1cclxuXHJcbi8vIHRlc3RcclxuXHJcbi8vIGNhc2UgMVxyXG4vKiBjb25zb2xlLmxvZyhcclxuICBnZW5lcmF0ZVRvYyhcclxuICAgIFtcclxuICAgICAgJyMgWzAwMDEuIFx1NEUyNFx1NjU3MFx1NEU0Qlx1NTQ4Q1x1MzAxMFx1N0I4MFx1NTM1NVx1MzAxMV0oaHR0cHM6Ly9naXRodWIuY29tL1RkYWh1eW91L1ROb3Rlcy5sZWV0Y29kZS90cmVlL21haW4vbm90ZXMvMDAwMS4lMjAlRTQlQjglQTQlRTYlOTUlQjAlRTQlQjklOEIlRTUlOTIlOEMlRTMlODAlOTAlRTclQUUlODAlRTUlOEQlOTUlRTMlODAlOTEpJyxcclxuICAgICAgJyMjIDEuIFx1RDgzRFx1RENERCBEZXNjcmlwdGlvbicsXHJcbiAgICAgICcjIyAyLiBcdUQ4M0RcdURDQkIgXHU5ODk4XHU4OUUzLjEgLSBcdTUzQ0NcdTYzMDdcdTk0ODhcdTY2QjRcdTUyOUJcdTZDNDJcdTg5RTMnLFxyXG4gICAgICAnIyMgMy4gXHVEODNEXHVEQ0JCIFx1OTg5OFx1ODlFMy4yIC0gXHU5NzU5XHU2MDAxXHU1NEM4XHU1RTBDXHU4ODY4JyxcclxuICAgICAgJyMjIDQuIFx1RDgzRFx1RENCQiBcdTk4OThcdTg5RTMuMyAtIFx1NTJBOFx1NjAwMVx1NTRDOFx1NUUwQ1x1ODg2OCcsXHJcbiAgICBdLFxyXG4gICAgMVxyXG4gIClcclxuKVxyXG4tIFtbMDAwMS4gXHU0RTI0XHU2NTcwXHU0RTRCXHU1NDhDXHUzMDEwXHU3QjgwXHU1MzU1XHUzMDExXShodHRwczovL2dpdGh1Yi5jb20vVGRhaHV5b3UvVE5vdGVzLmxlZXRjb2RlL3RyZWUvbWFpbi9ub3Rlcy8wMDAxLiUyMCVFNCVCOCVBNCVFNiU5NSVCMCVFNCVCOSU4QiVFNSU5MiU4QyVFMyU4MCU5MCVFNyVBRSU4MCVFNSU4RCU5NSVFMyU4MCU5MSldKCMwMDAxLVx1NEUyNFx1NjU3MFx1NEU0Qlx1NTQ4Q1x1N0I4MFx1NTM1NWh0dHBzZ2l0aHViY29tdGRhaHV5b3V0bm90ZXNsZWV0Y29kZXRyZWVtYWlubm90ZXMwMDAxMjBlNGI4YTRlNjk1YjBlNGI5OGJlNTkyOGNlMzgwOTBlN2FlODBlNThkOTVlMzgwOTEpXHJcbiAgLSBbMS4gXHVEODNEXHVEQ0REIERlc2NyaXB0aW9uXSgjMS0tZGVzY3JpcHRpb24pXHJcbiAgLSBbMi4gXHVEODNEXHVEQ0JCIFx1OTg5OFx1ODlFMy4xIC0gXHU1M0NDXHU2MzA3XHU5NDg4XHU2NkI0XHU1MjlCXHU2QzQyXHU4OUUzXSgjMi0tXHU5ODk4XHU4OUUzMS0tLVx1NTNDQ1x1NjMwN1x1OTQ4OFx1NjZCNFx1NTI5Qlx1NkM0Mlx1ODlFMylcclxuICAtIFszLiBcdUQ4M0RcdURDQkIgXHU5ODk4XHU4OUUzLjIgLSBcdTk3NTlcdTYwMDFcdTU0QzhcdTVFMENcdTg4NjhdKCMzLS1cdTk4OThcdTg5RTMyLS0tXHU5NzU5XHU2MDAxXHU1NEM4XHU1RTBDXHU4ODY4KVxyXG4gIC0gWzQuIFx1RDgzRFx1RENCQiBcdTk4OThcdTg5RTMuMyAtIFx1NTJBOFx1NjAwMVx1NTRDOFx1NUUwQ1x1ODg2OF0oIzQtLVx1OTg5OFx1ODlFMzMtLS1cdTUyQThcdTYwMDFcdTU0QzhcdTVFMENcdTg4NjgpICovXHJcblxyXG4vLyBjYXNlIDJcclxuXHJcbi8qIGNvbnNvbGUubG9nKFxyXG4gIGdlbmVyYXRlVG9jKFtcclxuICAgICcjIyAxLiBcdUQ4M0RcdURDREQgRGVzY3JpcHRpb24nLFxyXG4gICAgJyMjIDIuIFx1RDgzRFx1RENCQiBcdTk4OThcdTg5RTMuMSAtIFx1NTNDQ1x1NjMwN1x1OTQ4OFx1NjZCNFx1NTI5Qlx1NkM0Mlx1ODlFMycsXHJcbiAgICAnIyMgMy4gXHVEODNEXHVEQ0JCIFx1OTg5OFx1ODlFMy4yIC0gXHU5NzU5XHU2MDAxXHU1NEM4XHU1RTBDXHU4ODY4JyxcclxuICAgICcjIyA0LiBcdUQ4M0RcdURDQkIgXHU5ODk4XHU4OUUzLjMgLSBcdTUyQThcdTYwMDFcdTU0QzhcdTVFMENcdTg4NjgnLFxyXG4gIF0pXHJcbilcclxuLSBbMS4gXHVEODNEXHVEQ0REIERlc2NyaXB0aW9uXSgjMS0tZGVzY3JpcHRpb24pXHJcbi0gWzIuIFx1RDgzRFx1RENCQiBcdTk4OThcdTg5RTMuMSAtIFx1NTNDQ1x1NjMwN1x1OTQ4OFx1NjZCNFx1NTI5Qlx1NkM0Mlx1ODlFM10oIzItLVx1OTg5OFx1ODlFMzEtLS1cdTUzQ0NcdTYzMDdcdTk0ODhcdTY2QjRcdTUyOUJcdTZDNDJcdTg5RTMpXHJcbi0gWzMuIFx1RDgzRFx1RENCQiBcdTk4OThcdTg5RTMuMiAtIFx1OTc1OVx1NjAwMVx1NTRDOFx1NUUwQ1x1ODg2OF0oIzMtLVx1OTg5OFx1ODlFMzItLS1cdTk3NTlcdTYwMDFcdTU0QzhcdTVFMENcdTg4NjgpXHJcbi0gWzQuIFx1RDgzRFx1RENCQiBcdTk4OThcdTg5RTMuMyAtIFx1NTJBOFx1NjAwMVx1NTRDOFx1NUUwQ1x1ODg2OF0oIzQtLVx1OTg5OFx1ODlFMzMtLS1cdTUyQThcdTYwMDFcdTU0QzhcdTVFMENcdTg4NjgpICovXHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFx0bm90ZXNcXFxcdXRpbHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXHRub3Rlc2pzXFxcXFROb3Rlcy50eXBlc2NyaXB0XFxcXC52aXRlcHJlc3NcXFxcdG5vdGVzXFxcXHV0aWxzXFxcXGdldF9naXRfdGltZXN0YW1wLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdC8udml0ZXByZXNzL3Rub3Rlcy91dGlscy9nZXRfZ2l0X3RpbWVzdGFtcC5qc1wiO2ltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCdcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBnZXRDaGFuZ2VkSWRzIH0gZnJvbSAnLi9nZXRfY2hhbmdlZF9pZHMuanMnXG5cbmNvbnN0IGV4ZWNBc3luYyA9IHByb21pc2lmeShleGVjKVxuY29uc3QgY2hhbmdlZElkcyA9IGdldENoYW5nZWRJZHMoKVxuXG4vKipcbiAqIFx1NEVDRSBSRUFETUUubWQgXHU2NTg3XHU0RUY2XHU4REVGXHU1Rjg0XHU4OUUzXHU2NzkwXHU3QjE0XHU4QkIwIElEXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZVBhdGhcbiAqIEByZXR1cm5zIHtzdHJpbmcgfCBudWxsfSBcdTdCMTRcdThCQjAgSURcbiAqL1xuZnVuY3Rpb24gcGFyc2VOb3RlSWQoZmlsZVBhdGgpIHtcbiAgLy8gXHU1M0Q2IG5vdGVzIFx1NEUwQlx1N0IyQ1x1NEUwMFx1NUM0Mlx1NzZFRVx1NUY1NVx1NTQwRFxuICBjb25zdCBwYXJ0cyA9IGZpbGVQYXRoLnNwbGl0KHBhdGguc2VwKVxuICBjb25zdCBub3Rlc0luZGV4ID0gcGFydHMuZmluZEluZGV4KChwYXJ0KSA9PiBwYXJ0ID09PSAnbm90ZXMnKVxuICBpZiAobm90ZXNJbmRleCA+PSAwICYmIHBhcnRzLmxlbmd0aCA+IG5vdGVzSW5kZXggKyAxKSB7XG4gICAgY29uc3QgZGlyTmFtZSA9IHBhcnRzW25vdGVzSW5kZXggKyAxXVxuICAgIGNvbnN0IG1hdGNoID0gZGlyTmFtZS5tYXRjaCgvXihcXGR7NH0pXFwuLykgLy8gXHU1MzM5XHU5MTREXHU1RjAwXHU1OTM0XHU3Njg0IDQgXHU0RTJBXHU2NTcwXHU1QjU3XG4gICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbMV1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIFx1NUYwMlx1NkI2NVx1ODNCN1x1NTNENiBHaXQgXHU2NUY2XHU5NUY0XHU2MjMzXHVGRjA4XHU0RjE4XHU1MzE2XHU3MjQ4XHVGRjFBXHU0RjdGXHU3NTI4XHU3QjE0XHU4QkIwIElEIFx1N0YxM1x1NUI1OFx1RkYwOVxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIFJFQURNRS5tZCBcdTY1ODdcdTRFRjZcdTdFRERcdTVCRjlcdThERUZcdTVGODRcbiAqIEByZXR1cm5zIHtQcm9taXNlPHtjcmVhdGVkX2F0OiBudW1iZXIsIHVwZGF0ZWRfYXQ6IG51bWJlcn0+fSB8fCBudWxsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRHaXRUaW1lc3RhbXBzKGZpbGVQYXRoLCBub3RlSWQpIHtcbiAgbm90ZUlkID0gbm90ZUlkIHx8IHBhcnNlTm90ZUlkKGZpbGVQYXRoKVxuICBpZiAoIW5vdGVJZCB8fCAhY2hhbmdlZElkcy5oYXMobm90ZUlkKSkgcmV0dXJuXG5cbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKVxuICBsZXQgY3JlYXRlZF9hdCA9IG5vd1xuICBsZXQgdXBkYXRlZF9hdCA9IG5vd1xuXG4gIHRyeSB7XG4gICAgLy8gXHU5OTk2XHU2QjIxXHU2M0QwXHU0RUE0XHU2NUY2XHU5NUY0XG4gICAgY29uc3QgeyBzdGRvdXQ6IGNyZWF0ZWRTdGRvdXQgfSA9IGF3YWl0IGV4ZWNBc3luYyhcbiAgICAgIGBnaXQgbG9nIC0tZGlmZi1maWx0ZXI9QSAtLWZvcm1hdD0lY3QgXCIke2ZpbGVQYXRofVwiYFxuICAgIClcbiAgICBjb25zdCBjcmVhdGVkVHMgPSBjcmVhdGVkU3Rkb3V0LnRvU3RyaW5nKCkudHJpbSgpXG4gICAgaWYgKGNyZWF0ZWRUcykgY3JlYXRlZF9hdCA9IHBhcnNlSW50KGNyZWF0ZWRUcywgMTApICogMTAwMFxuXG4gICAgLy8gXHU0RTBBXHU0RTAwXHU2QjIxIGNvbW1pdCBcdTc2ODRcdTY1RjZcdTk1RjRcbiAgICAvLyBjb25zdCB7IHN0ZG91dDogdXBkYXRlZFN0ZG91dCB9ID0gYXdhaXQgZXhlY0FzeW5jKFxuICAgIC8vICAgYGdpdCBsb2cgLTEgLS1mb3JtYXQ9JWN0IFwiJHtmaWxlUGF0aH1cImBcbiAgICAvLyApXG4gICAgLy8gY29uc3QgdXBkYXRlZFRzID0gdXBkYXRlZFN0ZG91dC50b1N0cmluZygpLnRyaW0oKVxuICAgIC8vIGlmICh1cGRhdGVkVHMpIHVwZGF0ZWRfYXQgPSBwYXJzZUludCh1cGRhdGVkVHMsIDEwKSAqIDEwMDBcbiAgfSBjYXRjaCB7XG4gICAgLy8gXHU2NTg3XHU0RUY2XHU1M0VGXHU4MEZEXHU2NzJBXHU1NzI4IEdpdCBcdTRFMkRcdTYzRDBcdTRFQTRcdThGQzdcdUZGMENcdTRGN0ZcdTc1MjhcdTVGNTNcdTUyNERcdTY1RjZcdTk1RjRcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IHsgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCB9XG5cbiAgY29uc29sZS5sb2coYEdpdCBcdTY1RjZcdTk1RjRcdTYyMzM6ICR7ZmlsZVBhdGh9YCwgcmVzdWx0KVxuICByZXR1cm4gcmVzdWx0XG59XG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXHRub3Rlc2pzXFxcXFROb3Rlcy50eXBlc2NyaXB0XFxcXC52aXRlcHJlc3NcXFxcdG5vdGVzXFxcXHV0aWxzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFx0bm90ZXNqc1xcXFxUTm90ZXMudHlwZXNjcmlwdFxcXFwudml0ZXByZXNzXFxcXHRub3Rlc1xcXFx1dGlsc1xcXFxnZXRfY2hhbmdlZF9pZHMuanNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L3Rub3Rlc2pzL1ROb3Rlcy50eXBlc2NyaXB0Ly52aXRlcHJlc3MvdG5vdGVzL3V0aWxzL2dldF9jaGFuZ2VkX2lkcy5qc1wiO2ltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGFuZ2VkSWRzKCkge1xuICBjb25zdCBjaGFuZ2VkRmlsZXMgPSBleGVjU3luYyhcbiAgICBgZ2l0IGRpZmYgLS1uYW1lLW9ubHkgSEVBRCAtLSBcIm5vdGVzL1swLTldWzAtOV1bMC05XVswLTldKi9SRUFETUUubWRcImBcbiAgICAvLyBcdTY4MzlcdTYzNkVcdTVGNTNcdTUyNERcdTRFRDNcdTVFOTNcdTcyQjZcdTYwMDFcdTU0OENcdTY3MDBcdThGRDFcdTRFMDBcdTZCMjFcdTYzRDBcdTRFQTRcdTRFNEJcdTk1RjRcdTc2ODRcdTZCRDRcdThGODNcbiAgKVxuICAgIC50b1N0cmluZygpXG4gICAgLnNwbGl0KC9cXHI/XFxuLylcbiAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgLm1hcCgoZnApID0+IGZwLnJlcGxhY2UoL15cInxcIiQvZywgJycpKSAvLyBcdTUzQkJcdTYzODkgR2l0IFx1OEY5M1x1NTFGQVx1NzY4NFx1NTNDQ1x1NUYxNVx1NTNGN1xuICAgIC5tYXAoKGZwKSA9PiBmcC5zcGxpdCgnLycpLmpvaW4ocGF0aC5zZXApKSAvLyBcdThGNkNcdTYzNjJcdTRFM0FcdTVFNzNcdTUzRjBcdThERUZcdTVGODRcblxuICBjb25zdCBjaGFuZ2VkSWRzID0gY2hhbmdlZEZpbGVzXG4gICAgLm1hcCgoZnApID0+IHtcbiAgICAgIGNvbnN0IHBhcnRzID0gZnAuc3BsaXQocGF0aC5zZXApXG4gICAgICBjb25zdCBkaXJOYW1lID0gcGFydHMuZmluZCgocCwgaSkgPT4gcGFydHNbaSAtIDFdID09PSAnbm90ZXMnKVxuICAgICAgcmV0dXJuIGRpck5hbWU/LnNsaWNlKDAsIDQpXG4gICAgfSlcbiAgICAuZmlsdGVyKEJvb2xlYW4pXG5cbiAgY29uc29sZS5sb2coJ1x1NjcyQ1x1NkIyMVx1NjZGNFx1NjVCMFx1NzY4NFx1N0IxNFx1OEJCMCBJRCBcdTk2QzZcdTU0MDg6JywgY2hhbmdlZElkcylcbiAgcmV0dXJuIG5ldyBTZXQoY2hhbmdlZElkcylcbn1cbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcdG5vdGVzanNcXFxcVE5vdGVzLnR5cGVzY3JpcHRcXFxcLnZpdGVwcmVzc1xcXFx0bm90ZXNcXFxcdXRpbHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXHRub3Rlc2pzXFxcXFROb3Rlcy50eXBlc2NyaXB0XFxcXC52aXRlcHJlc3NcXFxcdG5vdGVzXFxcXHV0aWxzXFxcXGdldF90bm90ZXNfY29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi90bm90ZXNqcy9UTm90ZXMudHlwZXNjcmlwdC8udml0ZXByZXNzL3Rub3Rlcy91dGlscy9nZXRfdG5vdGVzX2NvbmZpZy5qc1wiO2ltcG9ydCBmcyBmcm9tICdmcydcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcclxuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCdcclxuXHJcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCkpXHJcblxyXG5sZXQgdG5vdGVzX2NvbmZpZyA9IG51bGxcclxubGV0IHRub3Rlc19jb25maWdfcGF0aCA9IHBhdGgubm9ybWFsaXplKFxyXG4gIHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICcuLicsICcudG5vdGVzLmpzb24nKVxyXG4pXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG5vdGVzQ29uZmlnKCkge1xyXG4gIGlmICh0bm90ZXNfY29uZmlnKSByZXR1cm4gdG5vdGVzX2NvbmZpZ1xyXG4gIHRub3Rlc19jb25maWcgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyh0bm90ZXNfY29uZmlnX3BhdGgpKVxyXG4gIHJldHVybiB0bm90ZXNfY29uZmlnXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNBLE9BQU8seUJBQXlCO0FBQ2hDLE9BQU8sVUFBVTtBQUNqQixPQUFPLHlCQUF5QjtBQUNoQztBQUFBLEVBRUU7QUFBQSxPQUdLOzs7QUNSTCxhQUFVO0FBQ1YsZUFBWTtBQUNaLGVBQVk7QUFBQSxFQUNWO0FBQ0Y7QUFDQSxr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UCxVQUFVO0FBQUE7QUFBQSxjQUNWLE1BQU07QUFBQTtBQUFBLGNBQ04sTUFBTTtBQUFBO0FBQUEsWUFDUjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFPQSxNQUFNLFFBQVEsS0FBSyxLQUFLLElBQUk7QUFDMUIsZ0JBQU0sV0FBVyxJQUFJO0FBQ3JCLGNBQUksU0FBUyxTQUFTLFFBQVEsRUFBRyxRQUFPO0FBR3hDLGdCQUFNLGFBQWEsU0FBUyxRQUFRLFFBQVE7QUFDNUMsY0FBSSxhQUFhO0FBRWpCLGNBQUksZUFBZSxJQUFJO0FBQ3JCLGtCQUFNLGlCQUFpQixTQUFTLE1BQU0sYUFBYSxTQUFTLE1BQU07QUFDbEUseUJBQWEsZUFBZSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQUEsVUFDMUM7QUFHQSxnQkFBTSxhQUFhLEtBQUssVUFBVTtBQUFBO0FBQ2xDLGdCQUFNLE9BQU8sR0FBRyxPQUFPLGFBQWEsU0FBUyxLQUFLLEdBQUc7QUFJckQsaUJBQU87QUFBQSxRQUNUO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUNBLFNBQVMsQ0FBQyxHQUFHLGVBQU87QUFBQSxJQUNwQjtBQUFBLEVBQ0Y7QUFFQSxTQUFPQTtBQUNUOyIsCiAgIm5hbWVzIjogWyJmcyIsICJwYXRoIiwgInBhdGgiLCAiZmlsZVVSTFRvUGF0aCIsICJjaGFuZ2VkSWRzIiwgInBhdGgiLCAicGF0aCIsICJfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsIiwgImF1dGhvciIsICJpZ25vcmVfZGlycyIsICJyZXBvTmFtZSIsICJzb2NpYWxMaW5rcyIsICJtZW51SXRlbXMiLCAiX19kaXJuYW1lIiwgInBhdGgiLCAiZmlsZVVSTFRvUGF0aCIsICJfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsIiwgImF1dGhvciIsICJyZXBvTmFtZSIsICJyZXBvTmFtZSIsICJwYXRoIiwgImZzIiwgImlnbm9yZV9kaXJzIiwgInJlcG9OYW1lIiwgIm5vdGVzSUQiLCAiZnMiLCAicGF0aCIsICJoZWFkIiwgIm1hcmtkb3duIiwgInBhdGgiLCAiZnMiLCAidG9rZW5zIiwgInRoZW1lQ29uZmlnIl0KfQo=
